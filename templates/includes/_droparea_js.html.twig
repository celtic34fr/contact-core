{#
  DropArea : drag'n drop file(s) uploading module - JS modules
  - drop_id         : identifier to sigulize the DropArea and give reference for manage
  - progressBar     : boolean to present or not a progress bar during uploading file(s)
  - preview         : boolean to set preview zone (gallery) or not
  - droaprea_upload : Symfony route of Php module which manager uploading file(s)
#}

<script>

    var dropAreas = document.querySelectorAll(".drop-area");

    dropAreas.forEach(dropArea => {
        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false)   
            document.body.addEventListener(eventName, preventDefaults, false)
        });

        // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false)
        });
        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false)
        });

        // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);


        function preventDefaults (e) {
            e.preventDefault()
            e.stopPropagation()
        }

        function highlight(e) {
            dropArea.classList.add('highlight')
        }

        function unhighlight(e) {
            dropArea.classList.remove('active')
        }

        function handleDrop(e) {
            var dt = e.dataTransfer
            var files = dt.files
            handleFiles(files)
        }

        let uploadProgress = []
        {% if progressBar %}
        let progressBar = droparea.querySelector('.progress-bar')

        function initializeProgress(numFiles) {
            progressBar.value = 0
            uploadProgress = []

            for(let i = numFiles; i > 0; i--) {
                uploadProgress.push(0)
            }
        }

        function updateProgress(fileNumber, percent) {
            uploadProgress[fileNumber] = percent
            let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length
            progressBar.value = total
        }
        {% endif %}

        function handleFiles(files) {
            files = [...files]
            initializeProgress(files.length)
            files.forEach(uploadFile)
            files.forEach(previewFile)
        }

        {% if preview %}
        function previewFile(file) {
            let reader = new FileReader()
            reader.readAsDataURL(file)
            reader.onloadend = function() {
                    let img = document.createElement('img')
                    img.src = reader.result
                    droparea.querySelector('.gallery').appendChild(img)
            }
        }
        {% endif %}

        function uploadFile(file, i) {
            var url = '{{ path(droparea_upload) }}'
            var xhr = new XMLHttpRequest()
            var formData = new FormData()
            xhr.open('POST', url, true)
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')

            {% if progressBar %}
            // Update progress (can be used to show progress indicator)
            xhr.upload.addEventListener("progress", function(e) {
                updateProgress(i, (e.loaded * 100.0 / e.total) || 100)
            })
            {% endif %}

            xhr.addEventListener('readystatechange', function(e) {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    {% if progressBar %}
                    updateProgress(i, 100) // <- Add this
                    {% endif %}
                    alert('File uploaded complete');
                }
                else if (xhr.readyState == 4 && xhr.status != 200) {
                    // Error. Inform the user
                }
            })

            formData.append('upload_preset', 'ujpu6gyk')
            formData.append('file', file)
            xhr.send(formData)
        }
    });
</script>