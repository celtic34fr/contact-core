{# macros visant à l'affichage et au paramétrage des champs de formulaire #}
{# en HTML de base #}

{# macro form_start Entête/Ouverture de formulaire #}
{# - method     : Méthode d'envoye du formuliare, par défaut : 'POST' #}
{# - action     : URL d'appel serveur, par défaut '#' = pas d'appel #}
{# - classes    : Classe(s) CSS de présentation Bootstrap du formulaire, par défaut 'col-12 row' #}
{% macro form_start(name= "", args = {}) %}
	{% set method = args.method ?? 'POST' %}
	{% set action = args.action ?? "#" %}
	{% set classes = args.class ?? 'col-12 row' %}

	<form action="{{ action }}" method="{{ method }}" class="{{ classes }}"
    {% if name|length %} id="{{ name }}" name="{{ name }}" {% endif %}>
{% endmacro %}

{# macro form_end Fermeture de formulaire #}
{% macro form_end(required = false) %}
	</form>
    {% if required %}
    <div class="col-12 mt-2 text-right text-gray-600 px-0 mx-3">
        * champs obligatoires
    </div>
    {% endif %}
{% endmacro %}

{# macro radioBtn Radio Bouton #}
{# - name           : nom et identifiant #}
{# - occur          : occurance du radio bouton pour complément d'identifiant #}
{# dans le tableau args #}
{# - ovalue         : valeur associée à l'occurence de bouton radio #}
{# - olabel         : label affiché associée à l'occurence de bouton radio #}
{# - oclass         : classe CSS à appliquer au radio bouton #}
{# - disabled       : booléen indiquant si le radio bouton est actif (false) ou inactif (true) #}
{# - value          : valeur de sélection associée au groupe de radio boutons  #}
{% macro radioBtn(name, occur, args={}) %}
	{% set ovalue = args.ovalue ?? false %}
	{% set olabel = args.olabel ?? "" %}
	{% set oclass = args.oclass ?? "" %}
    {% set disabled = args.disabled ?? false %}
	{% set value = args.value ?? false %}

	{% set attributes %}
		{% if oclass|length %} class="{{ oclass }}" {% endif %}
		{% if disabled %} disabled="disabled" {% endif %}
        {% if value == ovalue %} checked="checked" {% endif %}
	{% endset %}

    {% set id_ = name ~ occur %}
    {% if olabel|length %}
        <label for="{{ id_ }}"> {{ olabel }}
    {% endif %}
    <input type="radio" id="{{ id_ }}" name="{{ name }}" value="{{ ovalue }}"
        {{ attributes }}
    />
    {% if olabel|length %}
        </label>
	{% endif %}
{% endmacro %}

{# macro checkbox Case à cocher #}
{# - name           : nom et identifiant #}
{# - label          : label ou libellé à afficher à coté de la case à cocher #}
{# dans le tableau args #}
{# - checked        : booléen indiquant si la case à cocher est cochée ou non #}
{# - value          : valeur associée à la case à cocher #}
{# - inline         : booléen indiquant l'affichage en 1 ligne (true) ou en 2 ligne standard (false) #}
{# - side           : coté de présention de la case à cacher : droite (right) ou gauche (left, valeur par défaut) #}
{# - class          : classe CSS à appliquer au group label et case à cocher #}
{# - cl_class       : classe à appliquer au label et à la case à cocher pour présentation #}
{#      - labelClass    : classe à applique sur le label #}
{#      - checkClass    : classe à aplliquer à la case à cocher #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) de la case à cocher #}
{# - title          : titre affecté à l'objet pour faire office de tooltip #}
{# - require_hide   : booléen indiquant si l'on doit afficher (true) ou non (false) que le champ est requis #}
{# - require        : booléen indiquant si le champ est requis ou non #}
{% macro checkbox(name, label="", args={}) %}
	{% set checked = args.checked ?? false %}
	{% set value = args.value ?? "" %}
	{% set inline = args.inline ?? false %}
	{% set inline = inline ? " one-line" : "" %}
    {% set side = args.side ?? "left" %}
    {% set side = (side != "right" and side != "left") ? "left" : side %}
	{% set class = args.class ?? "" %}
	{% set cl_class = args.cl_class ?? {} %}
    {% set labelClass = "" %}
    {% set checkClass = "" %}
	{% if cl_class is not empty %}
		{% set labelClass = cl_class.label ?? "" %}
	    {% set checkClass = cl_class.check ?? "" %}
	{% endif %}
	{% set labelClass = labelClass ~ inline %}
	{% set disabled = args.disabled ?? false %}
	{% set title = args.title ?? "" %}
    {% set require_hide = args.require_hide ?? false %}
    {% set require = args.require ?? false %}
    {% if inline %}
        {% set checkClass = checkClass|length ? checkClass : "checkbox col-12 row mx-0 px-0" %}
    {% else %}
        {% set checkClass = checkClass|length ? checkClass : "checkbox col-12 mx-0 px-0" %}
    {% endif %}

	{% set attributes %}
        {% if checkClass|length %} class="{{ checkClass }}" {% endif %}
        {% if disabled %} disabled="disabled" {% endif %}
        {% if title|length %} title="{{ title }}" {% endif %}
        {% if checked %} checked="checked" {% endif %}
        id="{{ name }}Input"
        value="{{ value }}"
    {% endset %}

	{% if required and not require_hide %}
        {% set label = label ~ ' <abbr class="required" title="required">*</abbr>' %}
    {% endif %}

	<div class="{{ class }}" id="{{ name }}">
        {% if side == "left" %}
        <label for="{{ name }}Input" class="{{ labelClass }} col-10">{{ label }}</label>
        {% endif %}
		<input type="checkbox" name="{{ name }}" {{ attributes|raw }}/>
        {% if side == "right" %}
        <label for="{{ name }}Input" class="{{ labelClass }} col-10">{{ label|raw }}</label>
        {% endif %}
	</div>
{% endmacro %}

{# macro hidden Input type Hidden (caché) #}
{# - name           : nom et identifiant #}
{# - value          : valeur par défaut du champs caché #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer (possible : inutile) #}
{# - ref            : identifiant servant de référence pour un autre champ pouvant modifier la valeur par défaut #}
{# - form           : #}
{# - custom_name    : #}
{% macro hidden(name, value="", args={}) %}
	{% set class = args.class ?? "" %}
	{% set ref = args.ref ?? "" %}
	{% set form = args.form ?? '' %}
    {% set custom_name = args.custom_name ?? name %}

    {% set attributes %}
        data-ref="{{ ref }}"
        class="{{ class }}"
        form="{{ form }}"
        type="hidden"
    {% endset %}

    <input name="{{ custom_name|raw }}" id="{{ name }}" value="{{ value }}" {{ attributes|raw }}/>
{% endmacro %}

{# macro submitbtn Bouton de soumission de formulaire #}
{# - name           : nom et identifiant #}
{# - label          : label ou libellé à afficher dans le bouton #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer (possible : inutile) #}
{# - event          : évènement à programmer sur le bouton #}
{# - codeJS         : code JavaScript à exécuter #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - title          : popover / tooltips à afficher au surval du bouton #}
{% macro submitbtn(name, label="", args={}) %}
	{% set class = args.class ?? "" %}
	{% set event = args.event ?? "" %}
	{% set codeJS = args.codeJS ?? "" %}
	{% set disabled = args.disabled ?? false %}
	{% set title = args.title ?? "" %}

	{% set attributes %}
		{% if class|length %} class="{{ class }}" {% endif %}
		{% if disabled %} disabled="disabled" {% endif %}
        {% if title|length %} title="{{ title }}" {% endif %}
        {% if label|length %} value="{{ label }}" {% endif %}
        type="submit"
	{% endset %}
    {% if event|length and codeJS|length %}
        {% set attributes = attributes ~ ' ' ~ event ~':"'~codeJS~'"' %}
    {% endif %}
    <input id="{{ name }}" name="{{ name }}" {{ attributes|raw }}>
{% endmacro %}

{# macro cancelbtn Bouton d'annulation de formulaire #}
{# - name           : nom et identifiant #}
{# - label          : label ou libellé à afficher dans le bouton #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer (possible : inutile) #}
{# - event          : évènement à programmer sur le bouton #}
{# - codeJS         : code JavaScript à exécuter #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - title          : popover / tooltips à afficher au surval du bouton #}
{% macro cancelbtn(name, label="", args= {}) %}
	{% set class = args.class ?? "" %}
	{% set event = args.event ?? "" %}
	{% set codeJS = args.codeJS ?? "" %}
	{% set disabled = args.disabled ?? false %}
	{% set title = args.title ?? "" %}

	{% set attributes %}
		{% if class|length %} class="{{ class }}" {% endif %}
		{% if disabled %} disabled="disabled" {% endif %}
        {% if title|length %} title="{{ title }}" {% endif %}
        {% if label|length %} value="{{ label }}" {% endif %}
        type="reset"
	{% endset %}
    {% if event|length and codeJS|length %}
        {% set attributes = attributes ~ ' ' ~ event ~':"'~codeJS~'"' %}
    {% endif %}
	<input id="{{ name }}" name="{{ name }}" {{ attributes|raw }}>
{% endmacro %}

{# macro select liste de sélection simple ou multiple #}
{# - idname         : identifiant #}
{# - label          : label ou libellé à afficher dans le bouton de chargement de fichier #}
{# dans le tableau args #}
{# - class          : classes à appliquer au DIV HTML englobant le sélecteur #}
{# - placeholder    : label ou libellé affiché dans la liste de sélection quand rien n'est choisi #}
{# - sl_class       : classes CSS à appliquer sur le label et le selecteur (bootstrap par défaut à 12) #}
{# - multiple       : booléen indiquant si 1 seul choix (false)à ou plusieurs (true), valeur par défaut : 1 choix #}
{# - require_hide   : booléen indiquant si l'on doit afficher (true) ou non (false) que le champ est requis #}
{# - default        : valeur de selection par défaut dans la liste de sélection #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) de la liste de sélection #}
{# - choices        : tableau des valeurs à afficher formé d'item : clé 'value', contenant {'disabled', 'label'} #}
{# - required       : booléen indiquant si le champ est requis ou non #}
{% macro select(idname, label='', args={}) %}
    {% set class = args.class ?? "" %}
    {% set class = class ? class : field.vars.class %}
    {% set placeholder = args.placeholder ?? "" %}
    {% set sl_class = args.sl_class ?? {} %}
    {% set multiple = args.multiple ?? false %}
    {% set require_hide = args.require_hide ?? false %}
    {% set default = args.default ?? "" %}
    {% set disabled = args.disabled ?? false %}
    {% set choices = args.choices ?? {} %}
    {% set choices = choices ?? field.vars.choices %}
    {% set required = args.required ?? false %}

    {% if placeholder is empty and choices[0] is defined and choices[0] is not empty %}
        {% set placeholder =  'placeholder' in choices[0]|keys ? choices[0]['placeholder'] : "" %}
    {% endif %}
    {% if disabled == false and choices[0] is defined and choices[0] is not empty %}
        {% set disabled =  'disabled' in choices[0]|keys ? choices[0]['disabled'] : false %}
    {% endif %}

    {% set label_cl = (sl_class is defined and sl_class.label is defined) ? sl_class.label : '' %}
    {% set select_cl = (sl_class is defined and sl_class.select is defined) ? sl_class.select : '' %}
	{% if select_cl is not empty or label_cl is not empty %}
        {% set class = class ~ ' row' %}
    {% endif %}
    {% set required = 'required' in label_cl ? true : args.required ?? false %}
	{% if required and 'required' not in label_cl %}
        {% set label_cl = label_cl ~ " required" %}
    {% endif %}

    {% set name = idname ~ (multiple ? '[]' : '') %}
    {% if label_cl|length and select_cl|length %}
        {% set class = class ~ " row" ~ (strpos(class, "col-") == -1 ? ' col-12' : '') %}
    {% endif %}

    {% set lattributes %}
        {% if label_cl|length %} class="{{ label_cl }}" {% endif %}
    {% endset %}

    {% set sattributes %}
        {% if select_cl|length %} class="select{{ select_cl }}" {% endif %}
        {% if multiple %} multiple="multiple" {% endif %}
        {% if disabled %} disabled="disabled" {% endif %}
    {% endset %}

	{% if required and not require_hide %}
        {% set label = label ~ ' <abbr class="required" title="required">*</abbr>' %}
    {% endif %}

	<div class="{% if class|length %}{{ class }}{% endif %}"> 
        {% if label|length %}
	    	<label for="{{ idname }}" {{ lattributes }}>
		    	{{ label|raw }}
		    </label>
    	{% endif %}
	    <select id="{{ idname }}" name="{{ name }}" {{ sattributes }}
        {% if placeholder|length %} data-placeholder="{{ placeholder }}" {% endif %}>
		{% for choice in choices %}
			<option 
                value="{{ choice.value }}"
				{% if choice.value == default %} selected="selected" {% endif %}>
				{{ choice.label }}
			</option>
		{% endfor %}
    	</select>
    </div>
{% endmacro %}

{# macro input Input HTML multifonction #}
{# - name           : nom et identifiant #}
{# - label          : label ou libellé à afficher dans le bouton #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer (possible : inutile) #}
{# - lclass         : classe CSS à appliquer sur le label (bootstrap par défaut à 12) #}
{# - iclass         : classe CSS à appliquer sur input HTML (bootstrap par défaut à 12) #}
{# - type           : type d'entrée attendue #}
{# - value          : valeur par défaut de la zone d'entrée #}
{# - placeholder    : label ou libellé affiché dans la zone de saisie quand vide #}
{# - form           : id formulaire relatif #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) de la zone de saisie #}
{% macro input(name, label="", args={}) %}
    {% set class = args.class is defined ? args.class : "" %}
    {% set lclass = args.lclass is defined ? args.lclass : "col-12" %}
    {% set iclass = args.iclass is defined ? args.iclass : "col-12" %}
    {% if 'col-' not in class %}
        {% set class = class ~ " col-12" %}
    {% endif %}
    {% if (lclass|length or iclass|length) and ('row' not in class) %}
        {% set class = class ~ " row" %}
    {% endif %}

    {% set type = args.type is defined ? args.type : "text" %}
    {% set value = args.value is defined ? args.value : "" %}
    {% set placeholder = args.placeholder is defined ? args.placeholder : "" %}
    {% set form = args.form is defined ? args.form : '' %}
    {% set disabled = args.disabled is defined ? args.disabled : false %}
    {% set dataset = args.dataset ?? {} %}

    {% if "[" in name and "]" in name %}
        {% set id = name|slice(0, strpos(name, '['))
            ~ "_" ~ name|slice(strpos(name, '[') + 1, strpos(name, ']') - strpos(name, '[')) %}
    {% else %}
        {% set id = name %}
    {% endif %}

    {% set attributes %}
        {% if type|length %} type="{{ type }}" {% endif %}
        value="{{ value }}"
        {% if placeholder|length %} placehoder="{{ placeholder }}" {% endif %}
        {% if form|length %} form="{{ form }}" {% endif %}
        {% if disabled %} disabled="disabled" {% endif %}
        {% for name, value in dataset %}
            data-{{ name }}="{{ value }}"
        {% endfor %}
    {% endset %}

    <div class="{{ class is not empty ? class : '' }}">
        {% if label|length %}
            <label for="{{ name }}" class="{{ lclass ?: '' }}">
                {{ label|raw }}
            </label>
        {% endif %}
        <div class="input_classic {{ iclass ?: '' }}"
            <input id="{{ id }}" name="{{ name }}" class="col-12 mx-0 px-0" {{ attributes|raw }}>
        </div>
    </div>
{% endmacro %}

{# macro dragNDrop rewrite Zone de Glisser-Déposer pour chargement de fichier via module javascript AJAX #}
{# - name           : nom et identifiant #}
{# dans le tableau args #}
{# - label              : label ou libellé à afficher dans le bouton de chargement de fichier #}
{# - label_class        : classe CSS à appliquer sur le label #}
{# - placeholder        : label ou libellé affiché dans la zone de saisie quand vide #}
{# - class              : classe CSS à appliquer sur input type:file #}
{# - multiple           : booléen (via strin) indiquant la possibilité ou non de charger plusieurs fichiers en 1 fois #}
{# - accept             : extension ou type de fichiers accepté au chargement #}
{# - routeController    : route Symfony pour le module AJAX : appel pour déclenchement module chargement coté serveur #}
{# - maxSize            : poids maximum des fichiers autorisés au chargement #}
{# - maxWidth           : largeur en points maximale autorisée pour une image à charger #}
{# - maxHeight          : hauteur en points maximale autorisée pour une image à charger #}
{# - maxFiles           : nombre maximum de fichiers à charger #}
{# - removeBtn          : booléen indiquant la présence ou non d'un bouton visant à supprimer le fichier chargé #}
{# - viewBtn            : booléen indiquant la présence ou non d'un bouton visant à visualiser le fichier chargé #}
{# - progressbar        : booléen indiquant la présence ou non d'une barre de progression des chargement de fichiers #}
{# - preview            : booléen indiquant la présence ou non d'une zone de visualisation des fichiers chargés #}
{# - disabled           : booléen d'activation (false) ou désactivation (true) de la zone de chargement #}
{# - handleFuntion      : nom de la méthode de prise en charge du téléchargement, 'handleFiles' par défaut #}
{# - initial_datas      : ensemble de fichiers présents à afficher #}
{% macro dragNDrop2(name, args={}) %}
    {% set label = args.label is defined ? args.label : "" %}
    {% set label_class = args.label_class is defined ? args.label_class : "" %}
	{% set class = (args.class is defined ? args.class : "") ~ " drop-area" %}
    {% set accept = args.accept is defined ? args.accept : "*" %}
    {% set multiple = args.multiple is defined ? args.multiple : "" %}
    {% set handleFunction = args.handleFunction ?? "handleFiles" %}
	{% set placeholder = args.placeholder ?? "" %}

    {% set routeController = args.routeController is defined ? args.routeController : "" %}
    {% set maxSize = args.maxSize is defined ? args.maxSize : "" %}
    {% set maxWidth = args.maxWidth is defined ? args.maxWidth : "" %}
    {% set maxHeight = args.maxHeight is defined ? args.maxHeight : "" %}
    {% set maxFiles = args.maxFiles is defined ? args.maxFiles : "" %}
    {% set initial_datas = args.initial_datas is defined ? (args.initial_datas | json_encode) : {} %}

    {% set removeBtn = args.removeBtn is defined ? args.removeBtn : false %}
    {% set viewBtn = args.viewBtn is defined ? args.viewBtn : false %}
    {% set progressbar = args.progressbar is defined ? args.progressbar : false %}
    {% set preview = args.preview is defined ? args.preview : false %}
    {% set disabled = args.disabled is defined ? args.disabled : false %}

    {% set input_attributes %}
        type="file"
        id="{{ name }}-fileElem"
        onchange="{{ handleFunction }}(this.files, '', '{{ name }}')"
        {% if multiple %} multiple {% endif %}
        {% if accept is not empty %} accept="{{ accept }}" {% endif %}
        {% if routeController is not empty %} data-url="{{ path(routeController) }}" {% endif %}
        {% if maxSize is not empty %} data-max-size="{{ maxSize }}" {% endif %}
        {% if maxWidth > 0 %} data-max-width="{{ maxWidth }}" {% endif %}
        {% if maxHeight > 0 %} data-max-height="{{ maxHeight }}" {% endif %}
        {% if maxFiles > 0 %} data-nb-files="{{ maxFiles }}" {% endif %}
        {% if removeBtn > 0 and not disabled %} data-remove-btn="{{ removeBtn }}" {% endif %}
        {% if viewBtn > 0 %} data-view-btn="{{ viewBtn }}" {% endif %}
        {% if initial_datas is not empty %} data-initial="{{ initial_datas }}" {% endif %}
        {% if disabled %} disabled="disabled" {% endif %}
    {% endset %}

    <div id="{{ name }}" class="{{ class }}">
        {% if placeholder is not empty %}<p>{{ placeholder }}</p>{% endif %}
        <input {{ input_attributes }}>
        {% if label is not empty %}
        <label class="button" for="{{name }}-fileElem">{{ label }}</label>
        {% endif %}
        {% if progressbar %}
        <progress id="{{ name }}-progress-bar" class="col-12" max=100 value=0></progress>
        {% endif %}
        <div id="{{ name }}-gallery" class="gallery{% if not preview %} hidden{% endif %}" data-nb-upd="0"></div>
    </div>
{% endmacro %}

{# macro dragNDrop Zone de Glisser-Déposer pour chargement de fichier via module javascript AJAX #}
{# - name           : nom et identifiant #}
{# dans le tableau args #}
{# - label          : label ou libellé à afficher dans le bouton de chargement de fichier #}
{# - label_class    : classe CSS à appliquer sur le label #}
{# - class          : classe CSS à appliquer sur input type:file #}
{# - multiple       : booléen (via strin) indiquant la possibilité ou non de charger plusieurs fichiers en 1 fois #}
{# - accept         : extension ou type de fichiers accepté au chargement #}
{# - url            : URL pour le module AJAX : appel pour déclenchement module chargement coté serveur #}
{# - maxSize        : poids maximum des fichiers autorisés au chargement #}
{# - maxWidth       : largeur en points maximale autorisée pour une image à charger #}
{# - maxHeight      : hauteur en points maximale autorisée pour une image à charger #}
{# - maxFiles       : nombre maximum de fichiers à charger #}
{# - removeBtn      : booléen indiquant la présence ou non d'un bouton visant à supprimer le fichier chargé #}
{# - viewBtn        : booléen indiquant la présence ou non d'un bouton visant à visualiser le fichier chargé #}
{# - progressbar    : booléen indiquant la présence ou non d'une barre de progression des chargement de fichiers #}
{# - gallery        : booléen indiquant la présence ou non d'une zone de visualisation des fichiers chargés #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) de la zone de chargement #}
{% macro dragNDrop(name, args={}) %}
    {% set label = args.label is defined ? args.label : "" %}
    {% set label_class = args.label_class is defined ? args.label_class : "" %}
    {% set class = args.class is defined ? args.class : "" %}
    {% set accept = args.accept is defined ? args.accept : "*" %}
    {% set multiple = args.multiple is defined ? args.multiple : "" %}

    {% set url = args.url is defined ? args.url : "" %}
    {% set maxSize = args.maxSize is defined ? args.maxSize : "" %}
    {% set maxWidth = args.maxWidth is defined ? args.maxWidth : "" %}
    {% set maxHeight = args.maxHeight is defined ? args.maxHeight : "" %}
    {% set maxFiles = args.maxFiles is defined ? args.maxFiles : "" %}
    {% set initial_datas = args.initial_datas is defined ? (args.initial_datas | json_encode) : {} %}

    {% set removeBtn = args.removeBtn is defined ? args.removeBtn : false %}
    {% set viewBtn = args.viewBtn is defined ? args.viewBtn : false %}
    {% set progressbar = args.progressbar is defined ? args.progressbar : false %}
    {% set gallery = args.gallery is defined ? args.gallery : false %}
    {% set disabled = args.disabled is defined ? args.disabled : false %}

    {% set hidden_name = args.hidden_name %}

    {% set attributes %}
        {% if multiple %} multiple {% endif %}
        {% if accept is not empty %} accept="{{ accept }}" {% endif %}
        {% if url is not empty %} data-url="{{ url }}" {% endif %}
        {% if maxSize is not empty %} data-max-size="{{ maxSize }}" {% endif %}
        {% if maxWidth > 0 %} data-max-width="{{ maxWidth }}" {% endif %}
        {% if maxHeight > 0 %} data-max-height="{{ maxHeight }}" {% endif %}
        {% if maxFiles > 0 %} data-max-file="{{ maxFiles }}" {% endif %}
        {% if removeBtn > 0 and not disabled %} data-remove-btn="{{ removeBtn }}" {% endif %}
        {% if viewBtn > 0 %} data-view-btn="{{ viewBtn }}" {% endif %}
        {% if initial_datas is not empty %} data-initial="{{ initial_datas }}" {% endif %}
        data-hidden-name="{{ hidden_name }}"
        {% if disabled %} disabled="disabled" {% endif %}
    {% endset %}

    <div id="{{ name }}-drop-area" class="drop-area"> <input type="file" id="{{ name }}" name="{{ name }}" class="{{ class }}" {{ attributes|raw }}>
        <label class="{{ label_class }}" for="{{ name }}">{{ label }}</label>
        {% if progressbar %}
            <progress id="{{ name }}progress-bar" class="progress" max="100" value="0"></progress>
		{% endif %}
		{% if gallery %}
			<div id="{{ name }}-gallery" class="gallery"></div>
		{% endif %}
	</div>
{% endmacro %}

{# #}
{# - id             : identifiant #}
{# - type           : type de champ à afficher #}
{# dans le tableau args #}
{# - label          : label ou libellé à afficher #}
{# - fclas          : classe à appliquer au champ #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) de la zone de chargement #}
{% macro inputs(id, type, args) %}
    {% set label = args.label is defined ? args.label : "" %}
    {% set fclas = args.fclas is defined ? args.fclas : "" %}
    {% set disabled = args.disabled is defined ? args.disabled : false %}

    {% if type == 'input' %}
        {{ _self.input(id, label, {'class':fclas, 'disabled':disabled}) }}
    {% endif %}
{% endmacro %}

{# #}
{# - group          : identifiant #}
{# - title          : label ou titre donné au bloc group #}
{# dans le tableau args #}
{# - fields         : nom de chaque champ du groupe #}
{# - labels         : labels ou libellés à afficher devant chaque champ du groupe #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) de la zone de chargement #}
{% macro group(group, title="", args={} ) %}
    {% import _self as fields %}
    {% set class = args.class is defined ? args.class : "" %}
    {% set disabled = args.disabled is defined ? args.disabled : false %}
    {% set fields = args.fields is defined ? args.fields : {} %}
    <div id="{{ group }}" name="{{ group }}" class="{{ class }} row"
        {% if title is defined and title is not empty %} title="{{ title| raw }}"{% endif %}>
        {% for field, attrs in fields %}
            {% set macro = attrs.type %}
            {% set args = attrs.args %}
            {% set label = args.label ?? "" %}
            {% set macro_args = args.params ?? {} %}
            {% if macro == 'input' %}
                {{ fields.input(field, label, macro_args) }}
            {% elseif macro == "select" %}
                {{ fields.select(field, label, macro_args) }}
            {% endif %}
        {% endfor %}
    </div>
{% endmacro %}

{# macro switchTextSides interrupteur avec texte de chaque coté #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - checked        : si l'interrupteur est à 'on' (true) ou non (false par défaut) ref. checkbox #}
{#                    dans le tableau args #}
{# - class          : classes à appliquer au DIV HTML englobant l'interrupteur #}
{# - ltext          : Label à afficher à gauche de l'interrupteur #}
{# - lclass         : classes CSS à appliquer sur le label à gauche de l'interrupteur #}
{# - lbckgrd        : couleur de fond à appliquer à l'interrupteur non 'coché' #}
{# - rtext          : Label à afficher à droite de l'interrupteur #}
{# - rclass         : classes CSS à appliquer sur le label à droite de l'interrupteur #}
{# - rbckgrd        : couleur de fond à appliquer à l'interrupteur 'coché' #}
{# - type           : type d'interrupteur : 'round' (valeur par défaut), et 'square' #}
{# - form           : forme de présentation : 'h' horizontal (1 ligne), 'v' vertival (3 lignes) #}
{# - between        : espace entre les textes pour le bouton ON/OFF, par défaut 2 (bootstrap) #}
{% macro switchTextSides(full_name, checked = false, args = {}) %}
    {% set class = args.class ?? "" %}
    {% set ltext = args.ltext ?? "" %}
    {% set lclass = args.lclass ?? "" %}
    {% set lbckgrd = args.lbckgrd ?? "#CCCCCC" %}
    {% set rtext = args.rtext ?? "" %}
    {% set rclass = args.rclass ?? "" %}
    {% set rbckgrd = args.rbckgrd ?? "#2196F3" %}
    {% set type = args.type ?? "" %}
    {% set form = args.form ?? 'h' %}
    {% set between = args.between ?? 2 %}
    {% set between = between|number_format(0) %}

    {% set type = type not in ['round', 'square'] ? 'round' : type %}
    {% set checked = checked is empty or not checked ? false : checked %}
    {% set class = class ~ " switchTextSides" %}
    {% if form == "h" %}{% set class = class ~ " row" %}{% endif %}
    

	<style>
        .switchTextSides .col-4 {
            margin: 0 12px !important;
        }

        .switchTextSides .switch {
            height: 32px !important;
        }

        .switchTextSides label {
            padding: 0 12px;
        }

        .switchTextSides .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .switchTextSides .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: {{lbckgrd}};
            -webkit-transition: 0.4s;
            transition: 0.4s;
        }

        .switchTextSides .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: 0.4s;
            transition: 0.4s;
        }

        .switchTextSides input:checked + .slider {
            background-color: {{rbckgrd}};
        }

        .switchTextSides input:focus + .slider {
            box-shadow: 0 0 1px{{rbckgrd}};
        }

        .switchTextSides input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }

        .switchTextSides .slider.round {
            border-radius: 34px;
        }

        .switchTextSides .slider.round:before {
            border-radius: 50%;
        }
    </style>

	<div id="{{ full_name }}OnOff" class="{{ class }}">
        <div class="col-{{ (2 - (between / 2))|number_format(0) }}">&nbsp;</div>
        <div class="col-4 text-end {{ lclass }}">{{ ltext }}</div>
        <label class="switch col-{{ between }}">
            <input type="checkbox" id="{{ full_name }}" name="{{ full_name }}"
                {% if checked %} checked {% endif %}>
            <span class="slider {{ type }}"></span>
        </label>
        <div class="col-4 text-start {{ rclass }}">{{ rtext }}</div>
    </div>
{% endmacro %}

{# macros spécifiques HTML de base #}

{# macro btn Bouton pouvant avoir un évènement intégré #}
{# - name           : nom et identifiant #}
{# - label          : label ou libellé à afficher dans le bouton #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer (possible : inutile) #}
{# - bclass         : classe CSS à appliquer sur le bouton #}
{# - event          : évènement à programmer sur le bouton #}
{# - codeJS         : code JavaScript à exécuter #}
{# - title          : titre affecté à l'objet pour faire office de tooltip #}
{# - formnovalidate : indicateur de non validation de formulaire si inclus dans un #}
{# - type           : type du bouton #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) de la case à cocher #}
{% macro btn(name, label="", args={}) %}
    {% set class = args.class is defined ? args.class : "" %}
    {% set event = args.event is defined ? args.event : "" %}
    {% set codeJS = args.codeJS is defined ? args.codeJS : "" %}
    {% set title = args.title is defined ? args.title : "" %}
    {% set formnovalidate = args.formnovalidate ?? false %}
    {% set type = args.type ?? 'submit' %}
    {% set data_url = args.data_url is defined ? args.data_url : "" %}
    {% set disabled = args.disabled is defined ? args.disabled : false %}

    {% set attributes %}
        {% if name|length %} id="{{ name }}" name="{{ name }}" {% endif %}
		{% if class|length %} class="{{ class }}" {% endif %}
		{% if event is defined and event is not empty and codeJS is defined and codeJS is not empty %}
            {{ event }}="{{ codeJS }}"
    	{% endif %}
		{% if title|length %} title="{{ title }}" {% endif %}
		{% if formnovalidate %}
	        formnovalidate="formnovalidate"
    	{% endif %}
		{% if data_url|length %}
            data-url="{{ data_url }}"
	    {% endif %}
        type="{{ type }}"
    	{% set args_keys = args|keys %}
		{% for key in args_keys %}
			{% if key starts with 'data-' %}
                {{ key }}="{{ args[key] }}"
        	{% endif %}
	    {% endfor %}
		{% if disabled %} disabled {% endif %}
	{% endset %}
    <button {{ attributes|raw }}>
        {{ label|raw }}
    </button>
{% endmacro %}
