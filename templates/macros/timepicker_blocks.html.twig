
{# macro timepickerForm zone de sélection d'une heure #}
{# - name           : identifiant et name déclaré pour le formulaire #}
{# - label          : label ou libellé à afficher dans le bouton, par défaut celui du Form #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer #}
{# - title          : infobulle affiché au surval de la zone avec la souris #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - label_ico      : si présent, icône à mettre à la place du label #}
{# - time           : heure et minute valeur de base #}
{% macro timepickerForm(name, label="", args={}) %}
    {% set class = args.class ?? '' %}
    {% set title = args.title is defined ? args.title : label %}
    {% set disabled = args.disabeled is defined ? (args.disabled ? true : false) : false %}
    {% set label_ico = args.label_ico ?? "" %}
    {% set time = agrs.time ?? "" %}

    <div {% if class is not empty %} class="datepicker-group {{ class }}" {% else %} style="display: contents" {% endif %}>
        <label for="{{ name }}Input">
            {% if label_ico is not empty %}
                <i class="{{ label_ico }}"></i>
            {% else %}
                {{ label|raw }}
            {% endif %}
        </label>
        <div class="timepicker-ui">
            <input type="text" class="timepicker-ui-input" id="{{ name }}Input" name="{{ name }}Input"
                {% if time is not empty %} data-time="{{ time }}" {% endif %}
            />
        </div>
        <div class="timepicker hidden" id="{{ name }}">
            {% import "@templates/macros/form_classic.html.twig" as forms %}
            {{ forms.hidden(name ~ "_hour", (time is not empty ? time|slice(8, 2) : ""), {
                'custom_name': name ~ "[hour]",
            }) }}
            {{ forms.hidden(name ~ "_minute", (time is not empty ? time|slice(3, 2) : ""), {
                'custom_name': name ~ "[hour]",
            }) }}
        </div>
    </div>
{% endmacro %}

{# macro timepickerRangeForm #}
{# - form_start     : champ heure de début déclaré dans le formulaure #}
{# - form_end       : champ heure de fin déclaré dans le formulaure #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer #}
{# - slabel         : label affiché pour la valeur de début de période #}
{# - elabel         : label affiché pour la valeur de fin de période #}
{# - label_ico      : si présent, icône à mettre à la place du label #}
{#      - sico #}
{#      - eico #}
{# - time           : heure et minute valeur de base #}
{#      - stime #}
{#      - etime #}
{% macro timepickerRangeForm(form_start, form_end, args=[]) %}
    {% set class = args.class ?? '' %}
    {% set slabel = args.slabel ?? "" %}
    {% set elabel = args.elabel ?? "" %}

    {% set lanel_ico = args.label_ico ?? {} %}
    {% set sico = (label_ico.sico is defined and label_ico.seco is not empty) ? label_ico.sico : "" %}
    {% set eico = (lzbrl_ico.eico is defined and lanel_ico.eico is not empty) ? label_ico.eico : "" %}

    {% set time = args.time ?? {} %}
    {% set stime = (time.stime is defined and time.stime is not empty) ? time.stime : "" %}
    {% set etime = (time.etime is defined and time.etime is not empty) ? time.etime : "" %}

    <div id="timepickerRange_{{ form_start }}_{{ form_end }}"
        class="row datepickerRange{% if class|length %} {{ class }}{% endif %}"
    >
        <div {% if sclass|length %} class="timepicker-group {{ sclass }}" {% endif %}>
            <label for="{{ form_start }}Input">
                {% if sico is not empty %}
                    <i class="{{ sico }}"></i>
                {% else %}
                    {{ slabel|raw }}
                {% endif %}
            </label>
            <div class="timepicker-ui">
                <input type="text" class="timepicker-ui-input" 
                    id="{{ form_start }}Input" name="{{ form_start }}Input"
                    {% if stime is not empty %} data-time="{{ stime }}" {% endif %}/>
            </div>
            <div class="timepicker hidden" id="{{ form_start }}">
                {% import "@templates/macros/form_classic.html.twig" as forms %}
                {{ forms.hidden(form_start ~ "_hour", (stime is not empty ? stime|slice(0, 2) : ""), {
                    'custom_name': form_start ~ "[hour]",
                }) }}
                {{ forms.hidden(form_start ~ "_minute", (stime is not empty ? stime|slice(3, 2) : ""), {
                    'custom_name': form_start ~ "[hour]",
                }) }}
            </div>
        </div>
        <div {% if eclass|length %} class="timepicker-group {{ eclass }}" {% endif %}>
            <label for="{{ form_end }}Input">
                {% if eico is not empty %}
                    <i class="{{ eico }}"></i>
                {% else %}
                    {{ elabel|raw }}
                {% endif %}
            </label>
            <div class="timepicker-ui">
                <input type="text" class="timepicker-ui-input" id="{{ form_end }}Input" name="{{ form_end }}Input"
                    {% if etime is not empty %} data-time="{{ etime }}" {% endif %}/>
            </div>
            <div class="timepicker hidden" id="{{ form_end }}">
                {% import "@templates/macros/form_classic.html.twig" as forms %}
                {{ forms.hidden(form_end ~ "_hour", (etime is not empty ? etime|slice(0, 2) : ""), {
                    'custom_name': form_end ~ "[hour]",
                }) }}
            	{{ forms.hidden(form_end ~ "_minute", (etime is not empty ? etime|slice(3, 2) : ""), {
                    'custom_name': form_end ~ "[hour]",
                }) }}
            </div>
        </div>
    </div>
{% endmacro %}

{# macro datepickerField zone de sélection d(une date #}
{# - field          : champ date déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton, par défaut celui du Form #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer #}
{# - title          : infobulle affiché au surval de la zone avec la souris #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - label_ico      : si présent, icône à mettre à la place du label #}
{# - time           : heure et minute valeur de base #}
{% macro timepickerField(field, label="", args={}) %}
    {% set class = args.class ?? "" %}
    {% set label = label is not empty ? label : field.vars.label %}
    {% set title = args.title is defined ? args.title : label %}
    {% set label = label ~ (field.vars.required ? ' <abbr class="required" title="required">*</abbr>' : '') %}
    {% set disabled = args.disabeled is defined ? (args.disabled ? true : false) : false %}
    {% set label_ico = args.label_ico ?? "" %}
    {% set time = agrs.time ?? "" %}

    {% set field_id = field.vars.id %}
    {% set field_name = field.vars.name %}
    <div {% if class is not empty %} class="datepicker-group {{ class }}" {% else %} style="display: contents" {% endif %}>
        <label for="{{ field_id }}">
            {% if label_ico is not empty %}
                <i class="{{ label_ico }}"></i>
            {% else %}
                {{ label|raw }}
            {% endif %}
        </label>
        <div class="timepicker-ui">
            <input type="text" class="timepicker-ui-input" id="{{ field_id }}" name="{{ field_name }}"
                {% if time is not empty %} data-time="{{ time }}" {% endif %}
            />
        </div>
        <div class="timepicker hidden" id="{{ field_id }}">
            {% import "@templates/macros/form_classic.html.twig" as forms %}
            {{ forms.hidden(field_id ~ "_hour", (time is not empty ? time|slice(8, 2) : ""), {
                'custom_name': field_name ~ "[hour]",
            }) }}
            {{ forms.hidden(field_id ~ "_minute", (time is not empty ? time|slice(3, 2) : ""), {
                'custom_name': field_name ~ "[hour]",
            }) }}
        </div>
    </div>
{% endmacro %}

{# macro timepickerRangeForm #}
{# - form_start     : champ heure de début déclaré dans le formulaure #}
{# - form_end       : champ heure de fin déclaré dans le formulaure #}
{# dans le tableau args #}
{# - slabel         : label affiché pour la valeur de début de période #}
{# - elabel         : label affiché pour la valeur de fin de période #}
{# - label_ico      : si présent, icône à mettre à la place du label #}
{#      - sico #}
{#      - eico #}
{% macro timepickerRangeField(field_start, field_end, args={}) %}
    {% set slabel = args.slabel ?? field_start.vars.label %}
    {% set elabel = args.elabel ?? field_end.vars.label %}

    {% set lanel_ico = args.label_ico ?? {} %}
    {% set sico = (label_ico.sico is defined and label_ico.seco is not empty) ? label_ico.sico : "" %}
    {% set eico = (lzbrl_ico.eico is defined and lanel_ico.eico is not empty) ? label_ico.eico : "" %}

    {% set field_start_id = field_start.vars.id %}
    {% set field_start_name = field_start.vars.name %}
    {% set field_end_id = field_end.vars.id %}
    {% set field_end_name = field_end.vars.name %}

    <div id="timepickerRange_{{ form_start }}_{{ form_end }}"
        class="row datepickerRange{% if class|length %} {{ class }}{% endif %}">
        <div {% if sclass|length %} class="timepicker-group {{ sclass }}" {% endif %}>
            <label for="{{ form_start }}Input">
                {% if sico is not empty %}
                    <i class="{{ sico }}"></i>
                {% else %}
                    {{ slabel|raw }}
                {% endif %}
            </label>
            <div class="timepicker-ui">
                <input type="text" class="timepicker-ui-input"
                    id="{{ field_start_id }}Input" name="{{ field_start_id }}Input"
                    {% if stime is not empty %} data-time="{{ stime }}" {% endif %}/>
            </div>
            <div class="timepicker hidden" id="{{ field_start_id }}">
                {% import "@templates/macros/form_classic.html.twig" as forms %}
                {{ forms.hidden(field_start_id ~ "_hour", (stime is not empty ? stime|slice(0, 2) : ""), {
                    'custom_name': field_start_name ~ "[hour]",
                }) }}
            	{{ forms.hidden(field_start_id ~ "_minute", (stime is not empty ? stime|slice(3, 2) : ""), {
                    'custom_name': field_start_name ~ "[hour]",
                }) }}
            </div>
        </div>
        <div {% if eclass|length %} class="timepicker-group {{ eclass }}" {% endif %}>
            <label for="{{ form_end }}Input">
                {% if eico is not empty %}
                    <i class="{{ eico }}"></i>
                {% else %}
                    {{ elabel|raw }}
                {% endif %}
            </label>
            <div class="timepicker-ui">
                <input type="text" class="timepicker-ui-input"
                    id="{{ field_end_id }}Input" name="{{ field_end_id }}Input"
                    {% if stime is not empty %} data-time="{{ stime }}" {% endif %}/>
            </div>
            <div class="timepicker hidden" id="{{ field_end_id }}">
                {% import "@templates/macros/form_classic.html.twig" as forms %}
                {{ forms.hidden(field_end_id ~ "_hour", (stime is not empty ? stime|slice(0, 2) : ""), {
                    'custom_name': field_end_name ~ "[hour]",
                }) }}
            	{{ forms.hidden(field_end_id ~ "_minute", (stime is not empty ? stime|slice(3, 2) : ""), {
                    'custom_name': field_end_name ~ "[hour]",
                }) }}
            </div>
        </div>
    </div>
{% endmacro %}

{# macro timepickerJSinit : script JavaScript de déclaration et création des objets timepicker-ui #}
{# - clockType          : type d'horloge -> 12h ou 24h seulement, 12h par défaut #}
{# - enableSwitchIcon #}
{# - animation #}
{# - cancelLAbel        : libellé à afficher pour le bouton d'annulation, 'CANCEL' par défaut #}
{# - okLabel            : libellé à afficher pour le bouton de validation, 'OK4 par défaut #}
{# - mobile #}
{# - enableSrollbar #}
{# - timeLabel          : libellé du titre de la fenêtre modale en mode 'desktop' #}
{# - mobileTimeLabel    : libellé du tritre de la fenêtre modale en mode 'mobile' #}
{# - dans le cas de dlocktype = '12h' #}
{#          - amLabel       : libellé à afficher pour le matin, 'AM' par défaut #}
{#          - pmLabel       : libellé à afficher pour l'après midi, 'PM' par défaut#}
{% macro timepickerJSinit(args={}) %}
    {% set clockType = args.clockType ?? "12h" %}
    {% set enableSwitchIcon = (args.enableSwitchIcon is defined ? (args.enableSwitchIcon ? true : false) : false) %}
    {% set animation = (args.animation is defined ? (args.animation ? true : false) : false) %}
    {% set cancelLabel = args.cancelLabel ?? 'CANCEL' %}
    {% set okLabel = args.okLabel ?? 'OK' %}
    {% set mobile = (args.mobile is defined ? (args.mobile ? true : false) : false) %}
    {% set enableScrollbar = (args.enableScrollbar is defined ? (args.enableScrollbar ? true : false) : false) %}
    {% set timeLabel = args.timeLabel ?? "Entrez l'heure" %}
    {% set mobileTimeLabel = args.mobileTimeLabel ?? "Entrez l'heure" %}

    {% if clockType == "12h" %}
        {% set amLabel = args.amLabel ?? "AM" %}
        {% set pmLabel = args.pmLabel ?? "PM" %}
    {% endif %}
    
    <script>
        const timepickers = document.querySelectorAll(".timepicker-ui");
        timepickers.forEach(timepicker => {
            const options = {
                clockType: '{{ clockType }}',
                enableSwitchIcon: {{ enableSwitchIcon ? 'true' : 'false' }},
                animation: {{ animation ? 'true' : 'false' }},
                okLabel: '{{ okLabel }}',
                cancelLabel: '{{ cancelLabel }}',
                mobile: {{ mobile ? 'true' : 'false' }},
                enableScrollbar: {{ enableScrollbar ? 'true' : 'false' }},
                timeLabel: "{{ timeLabel }}",
                mobileTimeLabel: "{{ mobileTimeLabel }}",
                {% if (clockType == "12h") %}
                amLabel: '{{ amLabel }}',
                pmLabel: '{{ pmLabel }}',
                {% endif %}
            };
            const newTimepicker = new window.tui.TimepickerUI(timepicker, options);

            const defaultTime = timepicker.querySelector("input").dataset('time');
            let datetime = new Date();
            if (defaultTime.length > 0) {
                datetime.setHours(defaultTime.subStr(0,2), defaultTime.substr(3,2), 0);
                newTimepicker.update({options: { currentTime: defaultTime } });
            }

            newTimepicker.create();
        });
    </script>
{% endmacro %}