{# macro field tratement des champs standards #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton #}
{# dans le tableau args #}
{# - placeholder    : label ou libellé affiché dans la zone de saisie quand vide #}
{# - class          : #}
{# - il_class       : #}
{# - require_hide   : booléen indiquant si l'on doit afficher (true) ou non (false) que le champ est requis #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du champ #}
{% macro field(field, label="", args={}) %}
	{% set label = label is empty ? field.vars.label : label %}
	{% set placeholder = args.placeholder is defined ? args.placeholder :
        field.vars.placeholder is defined ? field.vars.placeholder : '' %}

	{% set class = args.class ?? "" %}
	{% set il_class = args.il_class is defined ? args.il_class : {} %}
	{% set require_hide = args.require_hide ?? false %}
	{% set disabled = args.disabled ?? false %}
	{% set value = args.value ?? field.vars.value %}
	{% set required = field.vars.required ?? false %}
    {% set dataset = args.dataset ?? {} %}

	{% set label_class %}
    	{{ ((il_class is defined and il_class.label is defined) ? il_class.label : '') }}
	{% endset %}
	{% set required = 'required' in label_class ? true : field.vars.required ?? false %}
	{# {% if required and 'required' not in label_class %} #}
	{# {% set label_class = label_class ~ " required" %} #}
	{# {% endif %} #}

    {% set input_class = (il_class is defined and il_class.input is defined) ? il_class.input : '' %}
	{% if label_class is not empty or input_class is not empty %}
    	{% set class = class ~ " row" %}
    {% endif %}
	{% if required and not require_hide and label is not empty %}
    	{% set label = label ~ ' <abbr class="required" title="required">*</abbr>' %}
    {% endif %}
	{% if label is empty and required and not require_hide %}
    	{% set class = class ~ " required" %}
    {% endif %}
    <div data-field-id="{{ field.vars.name }}"class="{{ class }}">
        {% if label is not empty %}
            <label for="{{ field.vars.id }}" class="{{ label_class }}">
                {{ label|raw }}
            </label>
        {% endif %}
        {% set attributes = {
            'data-id': field.vars.id,
            'placeholder': placeholder,
            'disabled': disabled,
        } %}
        {% for name, value in dataset %}
            {% set name = "data-"~name %}
            {% set attributes = attributes|merge({(name): value}) %}
        {% endfor %}

        <div class="{{ input_class }}">
            {{ form_widget(field, {'value': value, 'attr': attributes }) }}
        </div>
    </div>
{% endmacro %}

{# macro group #}
{% macro group(group, title="", args={} ) %}
	{% import _self as formfields %}
	{% set title = title is not empty ? title : group.vars.label %}
	{% set title_tag = args.title_tag ?? 'h3' %}
	{% set title_color = args.title_color ?? '#000000' %}
	{% set group_class = args.group_class ?? 'col-12' %}
	{% set fields = args.fields ?? {} %}

	<fieldset class="{{ group_class }} row">
		<{{title_tag}} style="font-weight:400; color: {{ title_color }}" class="col-12">
			{{ title }}
		</{{title_tag}}>
		{% for field in group %}
			{% set label = "" %}
			{% set parms = {} %}
			{% if field.vars.name in fields|keys %}
				{% set gField = fields[field.vars.name] %}
				{% set label = gField.label ?? "" %}
				{% set parms = gField.args ?? {} %}
			{% endif %}
			{% if field.vars.block_prefixes.1 == "choice" %}
				{{ formfields.select(field, label, parms) }}
			{% elseif field.vars.block_prefixes.1 == "hidden" %}
				{{ formfields.hidden(field, label, parms) }}
			{% else %}
				{{ formfields.field(field, label, parms) }}
			{% endif %}
		{% endfor %}
	</fieldset>
{% endmacro %}

{# macro submitbtn Bouton de soumission de formulaire #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer (possible : inutile) #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - title          : popover / tooltips à afficher au surval du bouton #}
{% macro submitbtn(field, label="", args={}) %}
	{% set class = args.class is defined ? args.class : '' %}
	{% set label = label is not empty ? label : field.vars.label %}
	{% set disabled = args.disabled ?? false %}
	{% set event = args.event ?? "" %}
	{% set action = args.action ?? "" %}
	{% set title = args.title ?? "" %}

	{% set disabled = disabled ? true : false %}

    {% if event|length and action|length %}
		{{ form_widget(field, {'attr': {
            'class': class,
            'disabled': disabled,
            (event): action,
            'title': title
        }, 'label': label}) }}
	{% else %}
		{{ form_widget(field, {'attr': {
            'class': class,
            'disabled': disabled,
            'title': title
        }, 'label': label}) }}
	{% endif %}
{% endmacro %}

{# macro checkbox case à cocher #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton #}
{# dans le tableau args #}
{# - inline         : booléen indiquant l'affichage en 1 ligne (true) ou en 2 ligne standard (false) #}
{# - side           : coté de présention de la case à cacher : droite (right) ou gauche (left, valeur par défaut) #}
{# - checked        : booléen indiquant si la case à cocher est cochée ou non #}
{# - cl_class       : classe à appliquer au label et à la case à cocher pour présentation #}
{#      - labelClass    : classe à applique sur le label #}
{#      - checkClass    : classe à aplliquer à la case à cocher #}
{# - require_hide   : booléen indiquant si l'on doit afficher (true) ou non (false) que le champ est requis #}
{% macro checkbox(field, label="", args={}) %}
	{% set label = label is empty ? field.vars.label : label %}
	{% set inline = args.inline ?? false %}
    {% set side = args.side ?? "left" %}
    {% if side != "right" and side != "left" %}
        {% set side = "left" %}
    {% endif %}
	{% set checked = args.checked ?? false %}
	{% set class = args.class ?? "" %}
	{% set cl_class = args.cl_class ?? {} %}
    {% set require_hide = args.require_hide ?? false %}

	{% set class = "form-check" ~ (class|length ? " " ~ class : "") %}
	{% set inline = inline ? " one-line" : "" %}
    {% set labelClass = "" %}
    {% set inputClass = "" %}
	{% if cl_class is not empty %}
		{% set labelClass = cl_class.label ?? "" %}
	    {% set inputClass = cl_class.check ?? "" %}
	{% endif %}
	{#% set labelClass = labelClass ~ " form-check-label" ~ inline ~ (field.vars.required ? ' required' : '') %#}
	{% set labelClass = labelClass ~ " form-check-label" ~ inline %}
	{% if field.vars.required and not require_hide %}
        {% set label = label ~ ' <abbr class="required" title="required">*</abbr>' %}
    {% endif %}
	{% set inputClass = inputClass ~ " form-check-input" ~ inline %}

    <div class="{{ class }}" id="{{ field.vars.id }}">
        {% if inline %}
            {% set checkClass = "checkbox col-12 row mx-0 px-0" %}
        {% else %}
            {% set checkClass = "checkbox col-12 mx-0 px-0" %}
        {% endif %}
        <div class="{{ checkClass }}">
            {% if side == "left" %}
            <label for="{{ field.vars.id }}Input" class="{{ labelClass }}">{{ label }}</label>
            {% endif %}
            <input type="checkbox" id="{{ field.vars.id }}" name="field.vars.name"
                class="{% if inputClass is not empty %}{{ inputClass }} {% endif %}form-check-input"
                value="{{ field.vars.value}}"{% if checked %} checked="checked"{% endif %}>
            {% if side == "right" %}
            <label for="{{ field.vars.id }}Input" class="{{ labelClass }}">{{ label|raw }}</label>
            {% endif %}
        </div>
        {#        
        {% if checked %}
            {{ form_widget(field, {
                'attr': {'class': inputClass, 'checked': true}, 'label': label, 'label_class': labelClass,
            }) }}
        {% else %}
            {{ form_widget(field, {
                'attr': {'class': inputClass}, 'label': label, 'label_class': labelClass,
            }) }}
        {% endif %}
        #}
	</div>
{% endmacro %}

{# macro submitBtnLabel label de bouton de soumission de formulaire #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton #}
{% macro submitbtnlabel(field, label="") %}
	{% set label = label is empty ? field.vars.label : label %}
    <p class="form_element ">
        <label for="{{ field.vars.id }}" tabindex="0" class="button">{{ label }}</label>
	</p>
{% endmacro %}

{# macro radioBtn bouton(s) radio #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - occurs         : numero de l'occurence de bouton radio #}
{# dans le tableau args #}
{# - ovalue         : valeur associée à l'occurence de bouton radio #}
{# - olabel         : label affiché associée à l'occurence de bouton radio #}
{% macro radioBtn(field, occur, args={}) %}
	{% set ovalue = (args.ovalue != false) %}
	{% set olabel = args.olabel ?? "" %}
	{% set oclass = args.oclass ?? "" %}
	{% set class = args.class ?? "" %}

	{{ field.vars.value }}
	{{ ovalue }}
	{{ field.vars.val == ovalue ? 'true' : 'false' }}

	<div {% if class|length %} class="{{ class }}" {% endif %}>
        {% set id_ = field.vars.name ~ occur %}
		<input type="radio" id="{{ id_ }}" name="{{ field.vars.full_name }}" value="{{ ovalue }}"
        {% if field.vars.value == ovalue %} checked="checked" {% endif %}
        {% if oclass|length %} class="{{ oclass }}" {% endif %}/>
		{% if olabel|length %}
			<label for="{{ id_ }}" {% if oclass|length %} class="{{ oclass }}" {% endif %}>
				{{ olabel }}
			</label>
		{% endif %}
	</div>
{% endmacro %}

{# macro dragNDrop rewrite zone de déposer-glisser pour chargement de fichier #}
{# - field              : champ déclaré dans le formulaure Symfony Form #}
{# dans le tableau args #}
{# - label              : label ou libellé à afficher dans le bouton #}
{# - placeholder        : label ou libellé affiché dans la zone de saisie quand vide #}
{# - label_class        : classe CSS à appliquer au label ou libellé à afficher #}
{# - class              : classe CSS à appliquer à toute la zone #}
{# - disabled           : booléen d'activation (false) ou désactivation (true) de la zone #}
{# - accept             : #}
{# - multiple           : booléen d'indication si l'on télécharge plusieurs fichiers (true) ou qu'un seul (false) #}
{# - progressBar        : booléen indiquant si l'on doit présenter (true) ou non (false) une barre de progression du téléchargement #}
{# - preview            : booléen permettant la mise en place d'une zone de prévisualisation (true) ou non (false) des fichiers chargés #}
{# - routeController    : #}
{# - maxSize            : taille maximale du fichier, 0 = pas de limite #}
{# - maxWidth           : largeur maximale du fichier image, 0 = pas de limite #}
{# - maxHeight          : hauteur maximale du fichier image; 0 = pas de limite #}
{# - maxFiles           : nombre maximal de fichiers à télécharger - 1, 0 = un seulr fichier à télécharger, d'ou multiple:= false #}
{# - removeBtn          : indicateur de présence du bouton de suppression du fichier téléchargé #}
{# - viewBtn            : indicateur de présence du bouton de visualisation du fichier téléchargé (ds autre onglet / fenêtre #}
{# - initial_datas      : #}
{# - hidden_name        : #}
{# - handleFuntion      : nom de la méthode de prise en charge du téléchargement, 'handleFiles' par défaut #}
{# - initial_datas  : ensemble de fichiers présents à afficher #}
{% macro dragNDrop2(field, args={}) %}
	{% set label = args.label is defined ? args.label : field.vars.label %}
	{% set placeholder = args.placeholder is defined ? args.placeholder : "" %}
	{% set label_class = args.label_class is defined ? args.label_class : "" %}
	{% set class = (args.class is defined ? args.class : "") ~ " drop-area" %}
    {% set disabled = args.disabled is defined ? args.disabled|bool : false %}
    {% set handleFunction = args.handleFunction ?? "handleFiles" %}

	{% set accept = field.vars.attr.accept is defined ? field.vars.attr.accept : "" %}
	{% set accept = args.accept is defined ? args.accept : accept %}
	{% set multiple = field.vars.attr.multiple is defined ? field.vars.attr.multiple : false %}
	{% set multiple = args.multiple is defined ? args.multiple : multiple %}
	{% set progressbar = field.vars.attr.progressbar is defined ? field.vars.attr.progressbar : false %}
	{% set progressbar = args.progressbar is defined ? args.progressbar : progressbar %}
	{% set preview = field.vars.attr.preview is defined ? field.vars.attr.preview : false %}
	{% set preview = args.preview is defined ? args.preview : preview %}
	{% set routeController = args.routeController is defined ? args.routeController : "" %}

	{% set maxSize = field.vars.attr.maxSize is defined ? field.vars.attr.maxSize : "" %}
	{% set maxSize = args.maxSize is defined ? args.maxSize : maxSize %}
	{% set maxWidth = field.vars.attr.maxWidth is defined ? field.vars.attr.maxWidth : 0 %}
	{% set maxWidth = args.maxWidth is defined ? args.maxWidth : maxWidth %}
	{% set maxHeight = field.vars.attr.maxHeight is defined ? field.vars.attr.maxHeight : 0 %}
	{% set maxHeight = args.maxHeight is defined ? args.maxHeight : maxHeight %}
	{% set maxFiles = field.vars.attr.maxFiles is defined ? field.vars.attr.maxFiles : 0 %}
	{% set maxFiles = args.maxFiles is defined ? args.maxFiles : maxFiles %}
    {% if maxFiles > 1 %}
    	{% set multiple = true %}
	{% endif %}

	{% set removeBtn = field.vars.attr.removeBtn is defined ? field.vars.attr.removeBtn : 0 %}
	{% set removeBtn = args.removeBtn is defined ? args.removeBtn : removeBtn %}
	{% set viewBtn = field.vars.attr.viewBtn is defined ? field.vars.attr.viewBtn : 0 %}
	{% set viewBtn = args.viewBtn is defined ? args.viewBtn : viewBtn %}
	{% set hidden_name = args.hidden_name ?? (field.vars.id~"_hidden") %}
	{% set initial_datas = args.initial_datas is defined ? (args.initial_datas | json_encode) : {} %}

    {% set input_attributes %}
        type="file"
        id="{{ field.vars.id }}-fileElem"
        onchange="{{ handleFunction }}(this.files, '', '{{ field.vars.id }}')"
        {% if multiple %} multiple {% endif %}
        {% if accept is not empty %} accept="{{ accept }}" {% endif %}
        {% if routeController is not empty %} data-url="{{ path(routeController) }}" {% endif %}
        {% if maxSize is not empty %} data-max-size="{{ maxSize }}" {% endif %}
        {% if maxWidth > 0 %} data-max-width="{{ maxWidth }}" {% endif %}
        {% if maxHeight > 0 %} data-max-height="{{ maxHeight }}" {% endif %}
        {% if maxFiles > 0 %} data-nb-files="{{ maxFiles }}" {% endif %}
        {% if removeBtn > 0 and not disabled %} data-remove-btn="{{ removeBtn }}" {% endif %}
        {% if viewBtn > 0 %} data-view-btn="{{ viewBtn }}" {% endif %}
        {% if initial_datas is not empty %} data-initial="{{ initial_datas }}" {% endif %}
        {% if disabled %} disabled="disabled" {% endif %}
        data-hidden-name="{{ hidden_name }}"
    {% endset %}

    <div id="{{ field.vars.id }}" class="dragdrop drop-area">
        {% if placeholder is not empty %}<p>{{ placeholder }}</p>{% endif %}
        <input {{ input_attributes }}>
        {% if label is not empty %}
        <label class="button" for="{{ field.vars.id }}-fileElem">{{ label }}</label>
        {% endif %}
        {% if progressbar %}
        <progress id="{{ field.vars.id }}-progress-bar" class="col-12" max=100 value=0></progress>
        {% endif %}
        <div id="{{ field.vars.id }}-gallery" class="gallery{% if not preview %} hidden{% endif %}" data-nb-upd="0"></div>
    </div>
{% endmacro %}

{# macro dragNDrop zone de déposer-glisser pour chargement de fichier #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# dans le tableau args #}
{# - label          : label ou libellé à afficher dans le bouton #}
{# - placeholder    : label ou libellé affiché dans la zone de saisie quand vide #}
{# - label_class    : classe CSS à appliquer au label ou libellé à afficher #}
{# - class          : classe CSS à appliquer à toute la zone #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) de la zone #}
{# - accept         : #}
{# - multiple       : booléen d'indication si l'on télécharge plusieurs fichiers (true) ou qu'un seul (false) #}
{# - progressBar    : booléen indiquant si l'on doit présenter (true) ou non (false) une barre de progression du téléchargement #}
{# - gallery        : booléen permettant la mise en place d'une zone de prévisualisation (true) ou non (false) des fichiers chargés #}
{# - url            : #}
{# - maxSize        : taille maximale du fichier, 0 = pas de limite #}
{# - maxWidth       : largeur maximale du fichier image, 0 = pas de limite #}
{# - maxHeight      : hauteur maximale du fichier image; 0 = pas de limite #}
{# - maxFiles       : nombre maximal de fichiers à télécharger - 1, 0 = un seulr fichier à télécharger, d'ou multiple:= false #}
{# - removeBtn      : indicateur de présence du bouton de suppression du fichier téléchargé #}
{# - viewBtn        : indicateur de présence du bouton de visualisation du fichier téléchargé (ds autre onglet / fenêtre #}
{# - initial_datas  : ensemble de fichiers présents à afficher #}
{# - hidden_name    : #}
{% macro dragNDrop(field, args={}) %}
	{% set label = args.label is defined ? args.label : field.vars.label %}
	{% set placeholder = args.placeholder is defined ? args.placeholder : "" %}
	{% set label_class = args.label_class is defined ? args.label_class : "" %}
	{% set class = (args.class is defined ? args.class : "") ~ " drop-area" %}
    {% set disabled = args.disabled is defined ? args.disabled|bool : false %}

	{% set accept = field.vars.attr.accept is defined ? field.vars.attr.accept : "" %}
	{% set accept = args.accept is defined ? args.accept : accept %}
	{% set multiple = field.vars.attr.multiple is defined ? field.vars.attr.multiple : false %}
	{% set multiple = args.multiple is defined ? args.multiple : multiple %}
	{% set progressbar = field.vars.attr.progressbar is defined ? field.vars.attr.progressbar : false %}
	{% set progressbar = args.progressbar is defined ? args.progressbar : progressbar %}
	{% set gallery = field.vars.attr.gallery is defined ? field.vars.attr.gallery : false %}
	{% set gallery = args.gallery is defined ? args.gallery : gallery %}
	{% set url = field.vars.attr.url is defined ? field.vars.attr.url : '' %}
	{% set url = args.url is defined ? args.url : url %}

	{% set maxSize = field.vars.attr.maxSize is defined ? field.vars.attr.maxSize : "" %}
	{% set maxSize = args.maxSize is defined ? args.maxSize : maxSize %}
	{% set maxWidth = field.vars.attr.maxWidth is defined ? field.vars.attr.maxWidth : 0 %}
	{% set maxWidth = args.maxWidth is defined ? args.maxWidth : maxWidth %}
	{% set maxHeight = field.vars.attr.maxHeight is defined ? field.vars.attr.maxHeight : 0 %}
	{% set maxHeight = args.maxHeight is defined ? args.maxHeight : maxHeight %}
	{% set maxFiles = field.vars.attr.maxFiles is defined ? field.vars.attr.maxFiles : 0 %}
	{% set maxFiles = args.maxFiles is defined ? args.maxFiles : maxFiles %}
    {% if maxFiles > 1 %}
    	{% set multiple = true %}
	{% endif %}

	{% set removeBtn = field.vars.attr.removeBtn is defined ? field.vars.attr.removeBtn : 0 %}
	{% set removeBtn = args.removeBtn is defined ? args.removeBtn : removeBtn %}
	{% set viewBtn = field.vars.attr.viewBtn is defined ? field.vars.attr.viewBtn : 0 %}
	{% set viewBtn = args.viewBtn is defined ? args.viewBtn : viewBtn %}
	{% set initial_datas = args.initial_datas is defined ? (args.initial_datas | json_encode) : {} %}

	{% set hidden_name = args.hidden_name ?? (field.vars.id~"-hidden") %}

	{% set attributes %}
		{% if multiple %} multiple {% endif %}
        {% if accept is not empty %}accept="{{ accept }}"{% endif %}
        {% if url is not empty %}data-url="{{ url }}"{% endif %}
        {% if maxSize is not empty %}data-max-size="{{ maxSize }}"{% endif %}
        {% if maxWidth > 0 %}data-max-width="{{ maxWidth }}"{% endif %}
        {% if maxHeight > 0 %}data-max-height="{{ maxHeight }}"{% endif %}
        {% if maxFiles > 0 %}data-max-file="{{ maxFiles }}"{% endif %}
        {% if removeBtn > 0 and not disabled %}data-remove-btn="{{ removeBtn }}"{% endif %}
        {% if viewBtn > 0 %}data-view-btn="{{ viewBtn }}"{% endif %}
        {% if initial_datas is not empty %}data-initial="{{ initial_datas }}"{% endif %}
        data-hidden-name="{{ hidden_name }}"
		{% if disabled %} disabled="disabled" {% endif %}
	{% endset %}

	<div id="{{ field.vars.id }}-drop-area" class="{{ class }}">
        <input type="file" id="{{ field.vars.id }}" name="{{ field.vars.id }}"
            {{ attributes|raw }}
        >
		<label class="{{ label_class }}" for="{{ field.vars.id }}">{{ label }}</label>
		{% if progressbar %}
			<progress id="{{ field.vars.id }}progress-bar" class="progress" max="100" value="0"></progress>
    	{% endif %}
	    {% if gallery %}
		    <div id="{{ field.vars.id }}-gallery" class="gallery"></div>
	    {% endif %}
    </div>
{% endmacro %}

{# macro hidden : input[type=hidden] #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{% macro hidden(field, args={}) %}
    {% set class = args.class is defined ? args.class : "" %}
    {% set ref = args.ref is defined ? args.ref : "" %}
    {% set value = args.value is defined ? args.value : field.vars.value %}
    <input id="{{ field.vars.id }}" name="{{ field.vars.full_name }}" type="hidden" value="{{ value }}"
        {% if ref|length %} data-ref="{{ ref }}" {% endif %}
        {% if class|length %} class="{{ class }}" {% endif %}/>
{% endmacro %}

{# macro select liste de sélection simple ou multiple #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton de chargement de fichier #}
{#                    dans le tableau args #}
{# - class          : classes à appliquer au DIV HTML englobant le sélecteur #}
{# - placeholder    : label ou libellé affiché dans la liste de sélection quand rien n'est choisi #}
{# - sl_class       : classes CSS à appliquer sur le label et le selecteur (bootstrap par défaut à 12) #}
{# - multiple       : booléen indiquant si 1 seul choix (false)à ou plusieurs (true), valeur par défaut : 1 choix #}
{# - require_hide   : booléen indiquant si l'on doit afficher (true) ou non (false) que le champ est requis #}
{# - default        : valeur de selection par défaut dans la liste de sélection #}
{% macro select(field, label="", args={}) %}
    {% set label = label ?? field.vars.label %}
    {% set class %}
        text-black
        {{ args.class ?? (field.vars.attr.class ?? "") }}
    {% endset %}

    {% set placeholder = args.placeholder is defined ? args.placeholder : field.vars.placeholder %}
    {% set multiple = args.multiple is defined ? args.multiple : false %}
    {% set disabled = args.disabled is defined ? args.disabled : false %}
    {% set require_hide = args.require_hide ?? false %}
    {% set default = args.default ?? field.vars.value %}
    {% set choices = args.choices ?? field.vars.choices %}

    {% set sl_class = args.sl_class ?? {} %}
    {% set label_cl = (sl_class is defined and sl_class.label is defined) ? sl_class.label : '' %}
    {% set select_cl = (sl_class is defined and sl_class.select is defined) ? sl_class.select : '' %}
	{% if select_cl is not empty or label_cl is not empty %}
        {% set class = class ~ ' row' %}
    {% endif %}
    {#% set required = 'required' in label_cl ? true : field.vars.required ?? false %}
	{% if required and 'required' not in label_cl %}
        {% set label_cl = label_cl ~ " required" %}
    {% endif %#}

    {% set sattributes %}
	    {% if select_cl|length %}class="select {{ select_cl }}"{% endif %}
	    {% if multiple %} multiple="multiple" {% endif %}
	    {% if disabled %} disabled="disabled"{% endif %}
    {% endset %}

	{% if field.vars.required and not require_hide %}
        {% set label = label ~ ' <abbr class="required" title="required">*</abbr>' %}
    {% endif %}

	<div class="{% if class|length %}{{ class }}{% endif %}"> 
        {% if label|length %}
	    	<label for="{{ field.vars.id }}" {% if label_cl|length %} class="{{ label_cl }}" {% endif %}>
		    	{{ label|raw }}
		    </label>
    	{% endif %}
	    <select id="{{ field.vars.id }}" name="{{ field.vars.full_name }}" {{ sattributes }}
        {% if placeholder|length > 0 %} data-placeholder="{{ placeholder }}" {% endif %}>
		{% for choice in choices %}
			<option 
                {# value="{{ choice.value }}" {% if choice is selectedchoice(default) %} selected="selected" {% endif %}>#}
                value="{{ choice.value }}"
				{% if choice.value == default %} selected="selected" {% endif %}>
				{{ choice.label }}
			</option>
		{% endfor %}
    	</select>
    </div>
{% endmacro %}

{# macro switchTextSides interrupteur avec texte de chaque coté #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - checked        : si l'interrupteur est à 'on' (true) ou non (false par défaut) ref. checkbox #}
{#                    dans le tableau args #}
{# - class          : classes à appliquer au DIV HTML englobant l'interrupteur #}
{# - ltext          : Label à afficher à gauche de l'interrupteur #}
{# - lclass         : classes CSS à appliquer sur le label à gauche de l'interrupteur #}
{# - lbckgrd        : couleur de fond à appliquer à l'interrupteur non 'coché' #}
{# - rtext          : Label à afficher à droite de l'interrupteur #}
{# - rclass         : classes CSS à appliquer sur le label à droite de l'interrupteur #}
{# - rbckgrd        : couleur de fond à appliquer à l'interrupteur 'coché' #}
{# - type           : type d'interrupteur : 'round' (valeur par défaut), et 'square' #}
{% macro switchTextSides(field, checked = false, args = {}) %}
    {% set class = args.class ?? "" %}
    {% set ltext = args.ltext ?? "" %}
    {% set lclass = args.lclass ?? "" %}
    {% set lbckgrd = args.lbckgrd ?? "#CCCCCC" %}
    {% set rtext = args.rtext ?? "" %}
    {% set rclass = args.rclass ?? "" %}
    {% set rbckgrd = args.rbckgrd ?? "#2196F3" %}
    {% set type = args.type ?? "" %}

    {% set type = type not in ['round', 'square'] ? 'round' : type %}
    {% set checked = checked is empty or not checked ? field.vars.checked : checked %}
    {% set class = class ~ " switchTextSides" %}

	<style>
        .switchTextSides .col-4 {
            margin: 0 12px !important;
        }

        .switchTextSides .switch {
            height: 32px !important;
        }

        .switchTextSides label {
            padding: 0 12px;
        }

        .switchTextSides .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .switchTextSides .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: {{lbckgrd}};
            -webkit-transition: 0.4s;
            transition: 0.4s;
        }

        .switchTextSides .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: 0.4s;
            transition: 0.4s;
        }

        .switchTextSides input:checked + .slider {
            background-color: {{rbckgrd}};
        }

        .switchTextSides input:focus + .slider {
            box-shadow: 0 0 1px{{rbckgrd}};
        }

        .switchTextSides input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }

        .switchTextSides .slider.round {
            border-radius: 34px;
        }

        .switchTextSides .slider.round:before {
            border-radius: 50%;
        }
    </style>

	<div class="{{ class }}">
        <div class="col-1">&nbsp;</div>
        <div class="col-4 text-end {{ lclass }}">{{ ltext }}</div>
        <label class="switch col-2 row">
            <input type="checkbox" id="{{ field.vars.id }}" name="{{ field.vars.full_name }}"
                {% if checked %} checked {% endif %}>
            <span class="slider {{ type }}"></span>
        </label>
        <div class="col-4 text-start {{ rclass }}">{{ rtext }}</div>
    </div>
{% endmacro %}

{# macro textarea pour affichage de zone de saisie de texte #}
{# - field          : champ déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton de chargement de fichier #}
{#                    dans le tableau args #}
{# - class          : classes à appliquer au DIV HTML englobant le sélecteur #}
{# - placeholder    : label ou libellé affiché dans la liste de sélection quand rien n'est choisi #}
{# - rows           : nombre de lignes à afficher à l'écran #}
{# - cols           : nombre de colonnes à afficher à l'écran #}
{# - value          : valeur à afficher à l'écran #}
{% macro textarea(field, label='', args={}) %}
    {% set label = label ?? field.vars.label %}
    {% set class = args.class ?? "" %}
    {% set placeholder = args.placeholder is defined ? args.placeholder :
        field.vars.placeholder is defined ? field.vars.placeholder : '' %}
    {% set rows = args.rows ?? "" %}
    {% set cols = args.cols ?? "" %}
    {% set maxlength = args.maxlength ?? "" %}
    {% set required = field.vars.required ?? false %}
    {% set tl_class = args.tl_class ?? {} %}
    {% set value = args.value ?? field.vars.value ?? '' %}

	{#% if required %}
        {% set label_class = "required" %}
    {% endif %#}
	{% if required and label is not empty %}
        {% set label = label ~ ' <abbr class="required" title="required">*</abbr>' %}
    {% endif %}
	{% if required and label is empty %}
        {% set class = class ~ ' required' %}
    {% endif %}
    {% set label_class = tl_class.label ?? "" %}
    {% set textarea_class = tl_class.textarea ?? "" %}
	{% if label_class is not empty and textarea_class is not empty %}
        {% set class = class ~ " row" %}
    {% endif %}

	<div {% if class is not empty %} class="{{ class }}" {% endif %}>
        {% if label is not empty %}
            <label for="{{ field.vars.id }}" {% if label_class is not empty %} class="{{ label_class }}" {% endif %}>
                {{ label|raw }}
            </label>
        {% endif %}

    	<textarea id="{{ field.vars.id }}" name="{{ field.vars.full_name }}"
            {% if rows is not empty %} rows="{{ rows }}" {% endif %}
            {% if cols is not empty %} cols="{{ cols }}" {% endif %}
            {% if maxlength is not empty %} maxlength="{{ maxlength }}" {% endif %}
            {% if placeholder is not empty %} placeholder="{{ placeholder }}" {% endif %}
            {% if textarea_class is not empty and label is not empty %} class="{{ textarea_class }}" {% endif %}>
            {{ value }}
        </textarea>
    </div>
{% endmacro %}
