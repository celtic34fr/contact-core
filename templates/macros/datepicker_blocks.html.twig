
{# macro datepickerForm zone de sélection d'une date #}
{# - name           : identifiant et name déclaré pour le formulaire #}
{# - label          : label ou libellé à afficher dans le bouton, par défaut celui du Form #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer #}
{# - placeholder    : label ou libellé affiché dans la zone de saisie quand vide #}
{# - date_min       : date minimale pouvant être choisie #}
{# - daye_max       : date maximale pouvant être choisie #}
{# - title          : infobulle affiché au surval de la zone avec la souris #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - day_date       : valeur initiale du choix de la date #}
{# - label_ico      : si présent, icône à mettre à la place du label #}
{# - datesDisabled : tableau ou function pour indiquer les dates que l'on ne pourra choisir #}
{% macro datepickerForm(name, label="", args={}) %}
    {% set class = args.class ?? '' %}
    {% set placeholder = args.placeholder is defined ? args.placeholder : "" %}
    {% set date_min = args.date_min is defined and args.date_min is not empty ? args.date_min : "" %}
    {% set date_max = args.date_max is defined and args.date_max is not empty ? args.date_min : "" %}
    {% set title = args.title is defined ? args.title : label %}
    {% set disabled = args.disabeled is defined ? (args.disabled ? true : false) : false %}
    {% set label_ico = args.label_ico ?? "" %}
    
    {% set day_date = args.day_date is defined ? args.day_date : "" %}
    {% if day_date is not empty %}
        {% if day_date is typeOf('array') %}
            {% set date = day_date %}
            {% set day_date = "%04d"|format(date.year) ~"-"~ "%02d"|format(date.month) ~"-"~ "%02d"|format(date.day) %}
        {% endif %}
    {% endif %}
    
    <div class="datepicker-group{% if class is not empty %} {{ class }}{% endif %}"
        {% if class is empty %} style="display: contents" {% endif %}>
        <label for="{{ name }}Input">
            {% if label_ico is not empty %}
                <i class="{{ label_ico }}"></i>
            {% else %}
                {{ label|raw }}
            {% endif %}
        </label>
        <input id="{{ name }}Input" name="{{ name }}Input" type="text" class="datepicker-input"
            {% if date_min|length %} data-date-min="{{ date_min }}" {% endif %}
            {% if date_max|length %} data-date-max="{{ date_max }}" {% endif %}
            {% if day_date != "0000-00-00" and day_date is not empty %} data-date="{{ day_date }}" {% endif %}
            {% if title|length %} title="{{ title }}" data-title="{{ title }}" {% endif %}
            {% if placeholder|length %} placeholder="{{ placeholder }}" {% endif %}
            {% if disabled %} disabled="disabled" {% endif %}
        >
        <div class="hidden datepicker" id="{{ name }}">
            {% import "@contact-core/macros/form_classic.html.twig" as forms %}
            {{ forms.hidden(name ~ "_day", (day_date is not empty ? day_date|slice(8, 2) : ""), {
                'custom_name': name ~ "[day]", "class": "date_day",
            }) }}
            {{ forms.hidden(name ~ "_month", (day_date is not empty ? day_date|slice(5, 2) : ""), {
                'custom_name': name ~ "[date][month]", "class": "date_month",
            }) }}
        	{{ forms.hidden(name ~ "_year", (day_date is not empty ? day_date|slice(0, 4) : ""), {
                'custom_name': name ~ "[date][year]", "class": "date_day",
            }) }}
        </div>
    </div>
{% endmacro %}

{# macro datepickerRangeForm zone de sélection de 2 dates #}
{# - form_start     : champ date de début déclaré dans le formulaure #}
{# - form_end       : champ date de fin déclaré dans le formulaure #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer #}
{# - date_min       : date minimale pouuvant être choisie, par défaut vide #}
{# - date_max       : date maximale pouuvant être choisie, par défaut vide #}
{# - slabel         : label affiché pour la valeur de début de période #}
{# - stitle         : infobulle affiché au surval de valeur de début de période avec la souris #}
{# - svalue         : valeur initiale du début de période (STRING ou ARRAY: [year, month, day, hour, minute]) #}
{# - elabel         : label affiché pour la valeur de fin de période #}
{# - etitle         : infobulle affiché au surval de valeur de fin de période avec la souris #}
{# - svalue         : valeur initiale du fin de période (STRING ou ARRAY: [year, month, day, hour, minute]) #}
{# - disabled #}
{#      - sdisabled #}
{#      - edisabled #}
{# - label_ico #}
{#      - sico #}
{#      - eico #}
{% macro datepickerRangeForm(form_start, form_end, args={}) %}
    {% set class = args.class ?? "" %}
    {% set date_min = args.date_min ?? "" %}
    {% set date_max = args.date_max ?? "" %}

    {% set slabel = args.slabel ?? '' %}
    {% set sclass = args.sclass ?? "" %}
    {% set stitle = args.stitle ?? slabel %}
    {% set svalue = args.svalue ?? "" %}
    {% if slabel is not empty %}
        {% set sclass = (sclass ~ " p-1")|trim %}
    {% endif %}

    {% set elabel = args.elabel ?? "" %}
    {% set eclass = args.eclass ?? "" %}
    {% set etitle = args.etitle ?? elabel %}
    {% set evalue = args.evalue ?? "" %}
    {% if elabel is not empty %}
        {% set eclass = (eclass ~ " p-1")|trim %}
    {% endif %}

    {% set disabled = args.disabled ? args.disabled : {} %}
    {% set sdisabled = false %}
    {% set edisabled = false %}
    {% if disabled is not empty %}
        {% set sdisabled = disabled.sdisabled is defined ? (disabled.sdisabled ? true : false) : false %}
        {% set edisabled = disabled.edisabled is defined ? (disabled.edisabled ? true : false) : false %}
    {% endif %}
    {% set sdisabled = sdisabled ? 'disabled="disabled"' : '' %}
    {% set edisabled = edisabled ? 'disabled="disabled"' : '' %}

    {% set lanel_ico = args.label_ico ?? {} %}
    {% set sico = (label_ico.sico is defined and label_ico.seco is not empty) ? label_ico.sico : "" %}
    {% set eico = (label_ico.eico is defined and label_ico.eico is not empty) ? label_ico.eico : "" %}

    {% import _self as fields %}
    {% if svalue is typeOf('array') %}
        {% set svalue = fields.datetimeArrayToString(svalue, true, false) %}
    {% endif %}
    {% if evalue is typeOf('array') %}
        {% set evalue = fields.datetimeArrayToString(evaleur, true, false) %}
    {% endif %}
    
    <div id="datepickerRange_{{ form_start }}_{{ form_end }}"
        class="row datepickerRange{% if class|length %} {{ class }}{% endif %}"
        {% if date_min|length %} data-date-min="{{ date_min }}" {% endif %}
        {% if date_max|length %} data-date-max="{{ date_max }}" {% endif %}
        {% if svalue|trim != "0000:00:00" %} data-start="{{ svalue }}" {% endif %}
        {% if evalue|trim != "0000:00:00" %} data-end="{{ evalue }}" {% endif %}
    >
        <div {% if sclass|length %} class="datepicker-group {{ sclass }}" {% endif %}>
            <label for="{{ form_start }}Input">
                {% if sico is not empty %}
                    <i class="{{ sico }}"></i>
                {% else %}
                    {{ slabel|raw }}
                {% endif %}
            </label>
            <input type="text" name="{{ form_start }}Input" id="{{ form_start }}Input"
                class="datepicker-input start" {{ sdisabled }}
                {% if stitle is not empty %} title="{{ stitle }}" data-title="{{ stitle }}" {% endif %}
            >
            <div class="hidden hidden_start datepicker" id="{{ form_start }}">
                {% import "@contact-core/macros/form_classic.html.twig" as forms %}
                {{ forms.hidden(form_start ~ "_day", (svalue is not empty ? svalue|slice(8, 2) : ""), {
                    'custom_name': form_start ~ "[day]", "class": "date_day",
                }) }}
                {{ forms.hidden(form_start ~ "_month", (svalue is not empty ? svalue|slice(5, 2) : ""), {
                    'custom_name': form_start ~ "[month]", "class": "date_month",
                }) }}
                {{ forms.hidden(form_start ~ "_year", (svalue is not empty ? svalue|slice(0, 4) : ""), {
                    'custom_name': form_start ~ "[year]", "class": "date_day",
                }) }}
            </div>
        </div>
        <div {% if eclass|length %} class="datepicker-group {{ eclass }}" {% endif %}>
            <label for="{{ form_end }}Input">
                {% if eico is not empty %}
                    <i class="{{ eico }}"></i>
                {% else %}
                    {{ elabel|raw }}
                {% endif %}
            </label>
            <input type="text" name="{{ form_end }}Input" id="{{ form_end }}Input"
                class="datepicker-input end" {{ edisabled }}
            >
            <div class="hidden hidden_end datepicker" id="{{ form_end }}">
                {% import "@contact-core/macros/form_classic.html.twig" as forms %}
                {{ forms.hidden(form_end ~ "_day", (evalue is not empty ? evalue|slice(8, 2) : ""), {
                    'custom_name': form_end ~ "[day]", "class": "date_day",
                }) }}
            	{{ forms.hidden(form_end ~ "_month", (evalue is not empty ? evalue|slice(5, 2) : ""), {
                    'custom_name': form_end ~ "[month]", "class": "date_month",
                }) }}
	            {{ forms.hidden(form_end ~ "_year", (evalue is not empty ? evalue|slice(0, 4) : ""), {
                    'custom_name': form_end ~ "[year]", "class": "date_day",
                }) }}
            </div>
        </div>
    </div>
{% endmacro %}

{# macro datepickerField zone de sélection d(une date #}
{# - field          : champ date déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton, par défaut celui du Form #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer #}
{# - placeholder    : label ou libellé affiché dans la zone de saisie quand vide #}
{# - date_min       : date minimale pouuvant être choisie #}
{# - date_max       : date maximale pouuvant être choisie #}
{# - title          : infobulle affiché au surval de la zone avec la souris #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - day_date       : valeur initiale du choix de la date #}
{# - label_ico      : si présent, icône à mettre à la place du label #}
{# - datesDisabled : tableau ou function pour indiquer les dates que l'on ne pourra choisir #}
{% macro datepickerField(field, label='', args={}) %}
    {% set class = args.class ?? "" %}
    {% set label = label is not empty ? label : field.vars.label %}
    {% set title = args.title is defined ? args.title : label %}
    {% set label = label ~ (field.vars.required ? ' <abbr class="required" title="required">*</abbr>' : '') %}
    {% set placeholder = args.placeholder is defined ? args.placeholder : "" %}
    {% set date_min = args.date_min is defined and args.date_min is not empty ? args.date_min : "" %}
    {% set date_max = args.date_max is defined and args.date_max is not empty ? args.date_max : "" %}
    {% set disabled = args.disabeled is defined ? (args.disabled ? true : false) : false %}
    {% set label_ico = args.label_ico ?? "" %}
    
    {% import _self as fields %}
    {% set field_value = fields.datetimeArrayToString(field.vars.value, true, false) %}
    {% set day_date = args.day_date is defined ? args.day_date : field_value %}
    {% if day_date is not empty %}
        {% if day_date is typeOf('array') %}
            {% set date = day_date %}
            {% set day_date = "%04d"|format(date.year) ~"-"~ "%02d"|format(date.month) ~"-"~ "%02d"|format(date.day) %}
        {% endif %}
    {% endif %}
    {% set field_id = field.vars.id %}
    {% set field_name = field.vars.name %}

    <div {% if class is not empty %} class="datepicker-group {{ class }}" {% else %} style="display: contents" {% endif %}>
        <label for="{{ field_id }}Input">
            {% if label_ico is not empty %}
                <i class="{{ label_ico }}"></i>
            {% else %}
                {{ label|raw }}
            {% endif %}
        </label>
        <input id="{{ field_id }}Input" name="{{ field_id }}Input" type="text" class="datepicker-input"
            {% if date_min|length %} data-date-min="{{ date_min }}" {% endif %}
            {% if date_max|length %} data-date-max="{{ date_max }}" {% endif %}
            {% if day_date is not empty and day_date != "0000-00-00" %} data-date="{{ day_date }}" {% endif %}
            {% if title|length %} title="{{ title }}" data-title="{{ title }}" {% endif %}
            {% if placeholder|length %} placeholder="{{ placeholder }}" {% endif %}
            {% if disabled %} disabled="disabled" {% endif %}>

        <div class="hidden datepicker" id="{{ field_id }}">
            {% import "@contact-core/macros/form_classic.html.twig" as forms %}
            {{ forms.hidden(field_id ~ "_day", (day_date is not empty ? day_date|slice(8, 2) : ""), {
                'custom_name': field_name ~ "[day]", "class": "date_day",
            }) }}
            {{ forms.hidden(field_id ~ "_month", (day_date is not empty ? day_date|slice(5, 2) : ""), {
                'custom_name': field_name ~ "[month]", "class": "date_month",
            }) }}
            {{ forms.hidden(field_id ~ "_year", (day_date is not empty ? day_date|slice(0, 4) : ""), {
                'custom_name': field_name ~ "[year]", "class": "date_day",
            }) }}
        </div>
    </div>
{% endmacro %}

{# macro datepickerRangeField zone de sélection de 2 dates #}
{# - field_start    : champ date de début déclaré dans le formulaure Symfony Form #}
{# - field_end      : champ date de fin déclaré dans le formulaure Symfony Form #}
{# dans le tableau args #}
{# - date_min       : date minimale pouuvant être choisie, par défaut vide #}
{# - date_max       : date maximale pouuvant être choisie, par défaut vide #}
{# - slabel         : label affiché pour la valeur de début de période #}
{# - stitle         : infobulle affiché au surval de valeur de début de période avec la souris #}
{# - elabel         : label affiché pour la valeur de fin de période #}
{# - etitle         : infobulle affiché au surval de valeur de fin de période avec la souris #}
{# - disabled #}
{#      - sdisabled #}
{#      - edisabled #}
{# - label_ico #}
{#      - sico #}
{#      - eico #}
{% macro datepickerRangeField(field_start, field_end, args={}) %}
    {% set class = args.class ?? "" %}
    {% set date_min = args.date_min ?? "" %}
    {% set date_max = args.date_max ?? "" %}

    {% set slabel = args.slabel ?? field_start.vars.label %}
    {% set sclass = args.sclass ?? "" %}
    {% set stitle = agrs.stitle ?? slabel %}
    {% if slabel is not empty %}{% set sclass = (sclass ~ " p-1")|trim %}{% endif %}

    {% set elabel = args.elabel ?? field_end.vars.label %}
    {% set eclass = args.eclass ?? "" %}
    {% set etitle = args.etitle ?? elabel %}
    {% if elabel is not empty %}{% set eclass = (eclass ~ " p-1")|trim %}{% endif %}

    {% set disabled = args.disabled ? args.disabled : {} %}
    {% set sdisabled = false %}
    {% set edisabled = false %}
    {% if disabled is not empty %}
        {% set sdisabled = disabled.sdisabled is defined ? (disabled.sdisabled ? true : false) : false %}
        {% set edisabled = disabled.edisabled is defined ? (disabled.edisabled ? true : false) : false %}
    {% endif %}
    {% set sdisabled = sdisabled ? 'disabled="disabled"' : '' %}
    {% set edisabled = edisabled ? 'disabled="disabled"' : '' %}

    {% set label_ico = args.label_ico ?? {} %}
    {% set sico = (label_ico.sico is defined and label_ico.seco is not empty) ? label_ico.sico : "" %}
    {% set eico = (label_ico.eico is defined and label_ico.eico is not empty) ? label_ico.eico : "" %}

    {% import _self as fields %}
    {% set field_start_value = fields.datetimeArrayToString(field_start.vars.value, true, false) %}
    {% set field_end_value = fields.datetimeArrayToString(field_end.vars.value, true, false) %}
    {% set field_start_id = field_start.vars.id %}
    {% set field_start_name = field_start.vars.name %}
    {% set field_end_id = field_end.vars.id %}
    {% set field_end_name = field_end.vars.name %}

    <div id="datepickerRange_{{ field_start_id }}_{{ field_end_id }}"
        class="row datepickerRange{% if class|length %} {{ class }}{% endif %}"
        {% if date_min|length %} data-date-min="{{ date_min }}" {% endif %}
        {% if date_max|length %} data-date-max="{{ date_max }}" {% endif %}
        {% if field_start_value|trim != "0000:00:00" %} data-start="{{ field_start_value }}" {% endif %}
        {% if field_end_value|trim != "0000:00:00" %} data-end="{{ field_end_value }}" {% endif %}
    >
        <div {% if sclass|length %} class="datepicker-group {{ sclass }}" {% endif %}>
            <label for="{{ field_start_id }}Input">
                {% if sico is not empty %}
                    <i class="{{ sico }}"></i>
                {% else %}
                    {{ slabel|raw }}
                {% endif %}
            </label>
            <input type="text" name="{{ field_start_id }}Input" id="{{ field_start_id }}Input"
                class="datepicker-input start" {{ sdisabled }}
                {% if stitle is not empty %} title="{{ stitle }}" data-title="{{ stitle }}" {% endif %}
            >
            
            <div class="hidden hidden_start datepicker" id="{{ field_start_id }}">
                {% import "@contact-core/macros/form_classic.html.twig" as forms %}
                {{ forms.hidden(field_start_id ~ "_day",
                    (field_start_value is not empty ? field_start_value|slice(8, 2) : ""), {
                    'custom_name': field_start_name ~ "[day]", "class": "date_day",
                }) }}
	            {{ forms.hidden(field_start_id ~ "_month",
                    (field_start_value is not empty ? field_start_value|slice(5, 2) : ""), {
                    'custom_name': field_start_name ~ "[month]", "class": "date_month",
                }) }}
	            {{ forms.hidden(field_start_id ~ "_year",
                    (field_start_value is not empty ? field_start_value|slice(0, 4) : ""), {
                    'custom_name': field_start_name ~ "[year]", "class": "date_day",
                }) }}
            </div>
        </div>
        <div {% if eclass|length %} class="datepicker-group {{ eclass }}" {% endif %}>
            <label for="{{ field_end_id }}">
                {% if eico is not empty %}
                    <i class="{{ eico }}"></i>
                {% else %}
                    {{ elabel|raw }}
                {% endif %}
            </label>
            <input type="text" name="{{ field_end_id }}Input" id="{{ field_end_id }}Input"
                class="datepicker-input end" {{ edisabled }}
            >

            <div class="hidden hidden_end datepicker" id="{{ field_end_id }}">
                {% import "@contact-core/macros/form_classic.html.twig" as forms %}
                {{ forms.hidden(field_end_id ~ "_day",
                    (field_end_value is not empty ? field_end_value|slice(8, 2) : ""), {
                    'custom_name': field_end_name ~ "[day]", "class": "date_day",
                }) }}
            	{{ forms.hidden(field_end_id ~ "_month",
                    (field_end_value is not empty ? field_end_value|slice(5, 2) : ""), {
                    'custom_name': field_end_name ~ "[month]", "class": "date_month",
                }) }}
	            {{ forms.hidden(field_end_id ~ "_year",
                    (field_end_value is not empty ? field_end_value|slice(0, 4) : ""), {
                    'custom_name': field_end_name ~ "[year]", "class": "date_day",
                }) }}
            </div>
        </div>
    </div>
{% endmacro %}

{# macro datepickerJSinit : script JavaScript de déclaration et création des objets Datepicker #}
{# dans le tableau args paramètres de la création d'objet Datepicker #}
{# - format     : chaîne de caractères précisant le format de sortie (type format de DateTime) #}
{# - autohide #}
{# - language       : code iso 6133 sur 2 caractères de la langue ou locale à utiliser, par défaut 'en' : anglais #}
{# - orientation #}
{# - nextArrow #}
{# - prevArrow #}
{# - weekStart      : indexation par valeur numérique du jour de début de la demaine 0 : dimanche, 1 : lundi, ... 6 : samedi #}
{# - calendarWeeks  : booléen indiquant si l'on affiche (true) ou non (false) kes jours de la semaine #}
{# - clearButton    : booléen indiquant si un bouton de réinitialisation à vide est affiché (true) ou non (false) #}
{# - todayButton    : booléen indiquant si un bouton de mis à date du jour est affiché (true) ou non (false) #}
{# - todayButtonMode #}
{# - dateDelimiter #}
{# - daysOfWeekHighlighted : Jours de la semaine à souligner #}
{# - pickLevel #}
{# - startView #}
{# - weekNumbers : affichage numéro de semaine, 0 : pas d'affichage, 1 : iso 8601 (france) par défaut possible de 0 à 4 #}
{# - daysOfWeekDisabled : jour de la semaine ne pouvfant être choisi tableau de valeur numérique de 0 (dimanche' à 6 'samedi) #}
{# - maxNumberOfDates : nombre maximum de date en saisie, par défaut 1 #}
{# - datesDisabled : tableau ou function pour indiquer les dates que l'on ne pourra choisir #}
{# ----- à voir si ajout ? #}
{% macro datepickerJSinit(args={}) %}
    {% set format = (args.format is defined and args.format is not empty) ? args.format : "dd/mm/yyyy" %}
    {% set autohide = args.autohide is defined ? (args.autohide ? 'true' : 'false') : 'false' %}
    {% set language = args.language is defined ? args.language : app.request.locale %}

    {% set orientation = args.orientation is defined ? args.orientation : 'auto' %}
    {% set nextArrow = args.nextArrow is defined ? args.nextArrow : "»" %}
    {% set prevArrow = args.prevArrow is defined ? args.prevArrow : "«" %}
    {% set weekStart = args.weekStart is defined ? args.weekStart : 0 %}
    {% set calendarWeeks = args.calendarWeeks is defined ? ( args.calendarWeeks ? 'true' : 'false') : 'false' %}
    {% set clearButton = args.clearButton is defined ? ( args.clearButton ? 'true' : 'false') : 'false' %}
    {% set todayButton = args.todayButton is defined ? ( args.todayButton ? 'true' : 'false') : 'false' %}
    {% set todayButtonMode = args.todayButtonMode is defined ? args.todayButtonMode : 0 %}
    {% set dateDelimiter = args.dateDelimiter is defined ? args.dateDelimiter : '/' %}
    {% set daysOfWeekHighlighted = args.daysOfWeekHighlighted is defined ? args.daysOfWeekHighlighted : {} %}
    {% set pickLevel = args.pickLevel ?? 0 %}
    {% set startView = args.startView ?? 0 %}
    {% set weekNumbers = args.weekNumbers is defined ? args.weekNumbers : 1 %}
    {% set daysOfWeekDisabled = args.daysOfWeekDisabled is defined ? args.daysOfWeekDisabled : '' %}
    {% set maxNumberOfDates = args.maxNumberOfDates ?? 1 %}
    {% set datesDisabled = args.datesDisabled ?? {} %}

    {% if datesDisabled is not empty %}
        {% if datesDisabled is not typeOf('array') %}
            {% set datesDisabled = "" %}
        {% else %}
            {% set arrayDatesDisable = "" %}
            {% for dateDisabled in datesDisabled %}
                {% if dateDisabled is typeOf('date') %}
                    {% import _self as fields %}
                    {% set dateDisabled = fields.datetimeArrayToString(dateDisabled, true, false) %}
                {% endif %}
                {% set arrayDatesDisable = arrayDatesDisable ~ dateDisabled ~ ", " %}
            {% endfor %}
            {% set datesDisabled = arrayDatesDisable|slice(0, arrayDatesDisable|length - 2) %}
        {% endif %}
    {% endif %}
    
    <script>
        function date_to_input_str(date) {
            return `${date.getYear() + 1900}-${(date.getMonth() + 1).toString().padStart(2, "0")}-${date.getDate()}`
        }

        function build_datepicker(datepicker) {
            let date_min = datepicker.dataset.dateMin ?? '';
            let date_max = datepicker.dataset.dateMax ?? '';
            let date_start = datepicker.dataset.date ?? null;
            let title = datepicker.dataset.title ?? "";
            let date = new Datepicker(datepicker, {
                autohide: {{ autohide }},
                minDate: date_min,
                maxDate: date_max,
                maxNumberOfDates: {{ maxNumberOfDates }}
                format: "{{ format }}",
                language: '{{ language }}',
                nextArrow: '{{ nextArrow }}',
                prevArrow: '{{ prevArrow }}',
                weekStart: {{ weekStart }},
                calendarWeeks: {{ calendarWeeks }},
                clearButton: {{ clearButton }},
                todayButton: {{ todayButton }},
                todayButtonMode: {{ todayButtonMode }},
                dateDelimiter: '{{ dateDelimiter }}',
                daysOfWeekHighlighted: [{{ daysOfWeekHighlighted }}],
                daysOfWeekDisabled: {{ daysOfWeekDisabled is not empty ? daysOfWeekDisabled : '[]' }}
                weekNumbers: {{ weekNumbers }},
                orientation: '{{ orientation }}',
                pickLevel: {{ pickLevel }},
                startView: {{ startView }},
                title: title,
                {% if datesDisabled is not empty %}
                datesDisabled: [{{ datesDisabled|toString }}],
                {% endif %}
            });
            if (date_start) {
                let date_init = new Date(date_start);
                date.setDate(date_init);
            }
            let hidden = datepicker.parentElement.querySelector("input.hidden");
            hidden.setAttribute('type', 'hidden');

            datepicker.addEventListener('changeDate', function (e) {
                let parent = this.parentElement;
                let inputdate = parent.querySelector("input[type=hidden]");
                let date = e.detail.date;
                inputdate.value = date_to_input_str(date);
                let {detail} = e;
                inputdate.dispatchEvent(new CustomEvent("changeDate", {detail, bubbles: true, cancelable: true}));
            });
        }

        document.addEventListener("DOMContentLoaded", function() {
            let datepickerFields = document.querySelectorAll('input.datepicker-input');
            datepickerFields.forEach(datepickerField => {
                build_datepicker(datepickerField);
            });
        });
    </script>
{% endmacro %}

{# macro datepickerqRangeJS : script JavaScript de déclaration et création des objets DatepickerRange #}
{# dans le tableau args paramètres de la création d'objet Datepicker #}
{# - format     : chaîne de caractères précisant le format de sortie (type format de DateTime) #}
{# - autohide #}
{# - language       : code iso 6133 sur 2 caractères de la langue ou locale à utiliser, par défaut celui de bolt CMS #}
{# - orientation #}
{# - nextArrow #}
{# - prevArrow #}
{# - weelStart      : indixation par valeur numérique du jour de début de la demaine 0 : dimanche, 1 : lunfi, ... 6 : samedi #}
{# - calendarWeeks  : booléen indiquant si l'on affiche (true) ou non (false) kes jours de la semaine #}
{# - clearBtn       : booléen indiquant si un bouton de réinitialisation à vide est affiché (true) ou non (false) #}
{# - todayBrn       : boolézn indiquant si un bouton de mis à date du jour est affiché (true) ou non (false) #}
{# - todayBtnMode #}
{# - dateDelimiter #}
{# - daysOfWeekHighlighted #}
{# - maxDate #}
{# - maxNumberOfDates : nombre maximum de date en saisie, par défaut 1 #}
{# - disabled #}
{# - pickLevel #}
{# - startView #}
{# - weekNumbers : affichage numéro de semaine, 0 : pas d'affichage, 1 : iso 8601 (france) par défaut possible de 0 à 4 #}
{% macro datepickerRangeJSinit(args={}) %}
    {# ensemble de code JS visant à gérer laes datepickerRange #}
    {% set format = (args.format is defined and args.format is not empty) ? args.format : "y-m-d" %}
    {% set autohide = args.autohide is defined ? (args.autohide ? 'true' : 'false') : 'false' %}
    {% set language = args.language is defined ? args.language : app.reques.locale %}

    {% set orientation = args.orientation is defined ? args.orientation : 'auto' %}
    {% set nextArrow = args.nextArrow is defined ? args.nextArrow : "»" %}
    {% set prevArrow = args.prevArrow is defined ? args.prevArrow : "«" %}
    {% set weekStart = args.weekStart is defined ? args.weekStart : 0 %}
    {% set calendarWeeks = args.calendarWeeks is defined ? ( args.calendarWeeks ? 'true' : 'false') : 'false' %}
    {% set clearBtn = args.clearBtn is defined ? ( args.clearBtn ? 'true' : 'false') : 'false' %}
    {% set todayBtn = args.todayBtn is defined ? ( args.todayBtn ? 'true' : 'false') : 'false' %}
    {% set todayBtnMode = args.todayBtnMode is defined ? args.todayBtnMode : 0 %}
    {% set dateDlimiter = args.dateDlimiter is defined ? args.dateDlimiter : '/' %}
    {% set daysOfWeekHighlighted = args.daysOfWeekHighlighted is defined ? args.daysOfWeekHighlighted : {} %}
    {% set pickLevel = args.pickLevel ?? 0 %}
    {% set startView = args.startView ?? 0 %}
    {% set maxNumberOfDates = args.maxNumberOfDates ?? 1 %}
    {% set disabled = args.disabled is defined ? (args.disabled ? 'true' : 'false') : 'false' %}
    {% set title = args.title ?? "" %}
    {% set weekNumbers = args.weekNumbers is defined ? args.weekNumbers : 1 %}

    <script>
        let $rangepicker = {};

        document.addEventListener('DOMContentLoaded', function (evt) {
            for (let datepickerRange of document.querySelectorAll('.datepickerRange')) {
                let date_min = datepickerRange.dataset.dateMin ? new Date(datepickerRange.dataset.dateMin) : null;
                let date_max = datepickerRange.dataset.dateMax ? new Date(datepickerRange.dataset.dateMax) : null;
                let rangepicker = new DateRangePicker(datepickerRange, {
                    autohide: {{ autohide }},
                    format: "{{ format }}",
                    clearBtn: {{ clearBtn }},
                    todayBtn: {{ todayBtn }},
                    calendarWeeks: {{ calendarWeeks }},
                    dateDlimiter: '{{ dateDlimiter }}',
                    daysOfWeekHighlighted: [{{ daysOfWeekHighlighted }}],
                    weekNumbers: {{ weekNumbers }},
                    language: '{{ language }}',
                    minDate: date_min,
                    maxDate: date_max,
                    maxNumberOfDates: {{ maxNumberOfDates }},
                    nextArrow: '{{ nextArrow }}',
                    prevArrow: '{{ prevArrow }}',
                    orientation: '{{ orientation }}',
                    showDaysOfWeek: true,
                    title: "{{ title }}",
                    todayBtnMode: {{ todayBtnMode }},
                    weekStart: {{ weekStart }},
                    inputs: [
                        datepickerRange.querySelector(".start"), datepickerRange.querySelector(".end")
                    ],
                    pickLevel: {{ pickLevel }},
                    startView: {{ startView }}
                });

                let date_start = datepickerRange.querySelector(".hidden_start").value ?? null;
                if (date_start) {
                    date_start = new Date(date_start);
                }
                let date_end = datepickerRange.querySelector(".hidden_end").value ?? null;
                if (date_end) {
                    date_end = new Date(date_end);
                }

                rangepicker.setDates(date_start, date_end);
                datepickerRange.querySelectorAll("input:not([type=hidden])")
                    .forEach((e) => e.addEventListener('changeDate', function (e) {
                        let parent = this.parentElement;
                        let inputdate = parent.querySelector("input[type=hidden]");
                        let date = e.detail.date;
                        inputdate.value = date_to_input_str(date);
                        let {detail} = e;
                        inputdate.dispatchEvent(new CustomEvent("changeDate", {
                            detail,
                            bubbles: true,
                            cancelable: true
                        }));
                    }));
                $rangepicker[datepickerRange.id] = rangepicker;
            }
        });
    </script>
{% endmacro %}

{# macro datetimeArrayToString : transporfomation de form DateTimeType value en chaîne de carectères #}
{# - datetime       : valeur proprement dite du datetime : #}
{#      tableau avec 2 tableaus : date et time #}
{#          date : [year, month, day] #}
{#          time: [hour, minut] #}
{# - date           : booleén précisant si l'on transforme la date (true) ou non (false) dans la chaîne finale  #}
{# - time           : booleén précisant si l'on transforme l'horaire (true) ou non (false) dans la chaîne finale  #}
{% macro datetimeArrayToString(datetime, date=true, time=true) %}
	{% set datetimeString = "" %}
    {% if datetime is not empty %}
        {% if date %}
            {% set datetimeString = 
                    datetimeString ~ (datetime.year ? datetime.year : '0000') ~ ":"
                    ~ (datetime.month ? datetime.month : '00') ~ ":"
                    ~ (datetime.day ? datetime.day : '00')
                %}
        {% endif %}
        {% if time %}
            {% set datetimeString = 
                    datetimeString ~ " " ~ (datetime.time.hour ? datetime.time.hour : '00')~":"
                    ~ (datetime.time.minute ? datetime.time.minute : '00')
                %}
        {% endif %}
    {% endif %}
    {{ datetimeString|trim }}
{% endmacro %}
