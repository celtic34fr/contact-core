{# macro jsFunc_dropzone : initialisation JavaScript des fonction gérant la zone de Drag'N Drop #}
{# dans le tableau args #}
{# - routeController    : route Symfony d'appel AJAX de la fonction de téléchargement de fichiers  #}
{# - progressbar        : booléen indiquant la présence (true) ou non (false) d'une barre de progression #}
{# - preview            : booléen indiquent la présence (true) ou non (false) d'une zone de prévisualisation #}
{# - handleFuntion      : nom de la méthode de prise en charge du téléchargement, 'handleFiles' par défaut #}
{# - iconSide           : coté de l'image ou sont présenté les icone vue et suppression #}
{#                        - TL : Top Left #}
{#                        - TR : Top Right #}
{#                        - BL : Botton Left #}
{#                        - BR : Botton Right #}
{# - maxWidthImg       : largeur maximale (entier) en point de l'image, fixée à 150 #}
{% macro jsFunc_dropzone(args={}) %}
    {% set routeController = args.routeController ?? "" %}
    {% set progressbar = args.progressbar ?? false %}
    {% set preview = args.preview ?? false %}
    {% set myPreset = args.myPreset ?? 'myPreset' %}
    {% set handleFunction = args.handleFunction ?? "handleFiles" %}
    {% set iconSide = args.iconSide ?? "TL" %}
    {% set maxWidthImg = "150" %}

<div class="modal" id="modal-confirm" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirmer votre action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="modal-body-content"></p>
            </div>
            <div class="modal-footer" style="border-top:0px">
                <button id="modal-btn-KO" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Non</button>
                <button id="modal-btn-OK" type="button" class="btn btn-primary">Oui</button>
            </div>
        </div>
    </div>
</div>

<script>
    var uploadProgress = []
    var viewIcon = document.createElement("i")
    var deltIcon = document.createElement("i")
    var modalElem = document.querySelector("#modal-confirm")
    let myModal = new bootstrap.Modal(modalElem, {
        keyboard: false,
        backdrop: 'static'
    })

    viewIcon.classList.add("bi-eye")
    viewIcon.classList.add("gallery_icon")
    viewIcon.classList.add("gallery_icon_{{ iconSide }}")
    viewIcon.style.color="blue"

    deltIcon.classList.add("bi-trash")
    deltIcon.classList.add("gallery_icon")
    deltIcon.classList.add("gallery_icon_{{ iconSide }}")
    deltIcon.style.color="red"

    function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
    }

    function highlight(e) {
        console.log(e);
        var dropArea = e.target.closest(".dragdrop")
        dropArea.classList.add('highlight')
    }

    function unhighlight(e) {
        console.log(e);
        var dropArea = e.target.closest(".dragdrop")
        dropArea.classList.remove('active')
    }

    function handleDrop(e) {
        e.preventDefault();
        var dt = e.dataTransfer
        var files = dt.files
        var dropzone = e.target.closest(".dragdrop")

        {{ handleFunction }}(files, e, dropzone)
    }

    function viewFile(evt) {
        let file = evt.target
        fileID = file.dataset.fileId
        const wprint = window.open('/bcknd/tools/view_doc/' + fileID )
        return false
    }

    function deltFile(evt) {
        let file = evt.target
        fileID = file.dataset.fileId
        d_confirm("Voulez-vous supprimer le logo ?", fileID, evt)
    }

    {% if progressbar %}
    function initializeProgress(numFiles, dropzone) {
        var progressBar = dropzone.querySelector('progress')
        progressBar.value = 0
        uploadProgress[dropzone.id] = []

        for(var i = numFiles; i > 0; i--) {
            uploadProgress[dropzone.id].push(0)
        }
    }

    function updateProgress(fileNumber, percent, dropzone) {
        var progressBar = dropzone.querySelector('progress')
        uploadProgress[dropzone.id][fileNumber] = percent
        var total = uploadProgress[dropzone.id].reduce((tot, curr) => tot + curr, 0) / uploadProgress[dropzone.id].length
        progressBar.value = total
    }
    {% endif %}

    {% if preview %}
    function previewFile(file, previewDiv, fileID) {
        var reader = new FileReader()
        reader.readAsDataURL(file)
        reader.onloadend = function() {
            var divPreview = document.createElement('div')
            var img = document.createElement('img')
            img.src = reader.result
            img.classList.add("gallery_img")
            img.style.width="{{ maxWidthImg }}px"
            {% if iconSide == "TL" or iconSide == "TR" %}
            img.style.top = '-1.76rem'
            {% endif %}
            divPreview.classList.add('img_preview')
            divPreview.classList.add('img-'+fileID)
            {# ajout icônes avant pour top left & right #}
            {% if iconSide == "TL" or iconSide == "TR" %}
            viewIcon.setAttribute("data-file-id", fileID)
            viewIcon.addEventListener('click', (e) => viewFile(e))
            divPreview.appendChild(viewIcon)
            deltIcon.setAttribute("data-file-id", fileID)
            deltIcon.addEventListener('click', (e) => deltFile(e))
            divPreview.appendChild(deltIcon)
            {% endif %}
            divPreview.appendChild(img)
            {# ajout icônes après pour bottom left & right #}
            {% if iconSide != "TL" and iconSide != "TR" %}
            viewIcon.setAttribute("data-file-id", fileID)
            viewIcon.addEventListener('click', (e) => viewFile(e))
            divPreview.appendChild(viewIcon)
            deltIcon.setAttribute("data-file-id", fileID)
            deltIcon.addEventListener('click', (e) => deltFile(e))
            divPreview.appendChild(deltIcon)
            {% endif %}
            previewDiv.appendChild(divPreview)
        }
    }
    {% endif %}

    function handleFiles(files, e, dropzone) {
        if (typeof e === "string") {
            var divDragdrop = document.getElementById(dropzone)
        } else {
            var divDragdrop = e.target.closest(".dragdrop")
        }
        var maxFile = parseInt(divDragdrop.querySelector("input").dataset.nbFiles)
        var divPreview = divDragdrop.querySelector(".gallery")
        var updFile = parseInt(divPreview.dataset.nbUpd)
        var rest = maxFile - updFile
        files = [...files]
        if (rest > 0 && files.length > rest) { // téléchargé un nombre partiel de fichier(s)
            alert("Too much files, you can only now upload "+rest+" file(s)")
        } else if (rest == 0) { // le nombre maximum de fichier(s) à télécharger est atteint
            alert("You have "+maxFile+" file(s) uploaded, you can't upload any more")
        } else { // téléchargement proprement dit de fichier(s)
            {% if progressbar %}
            initializeProgress(files.length, divDragdrop)
            {% endif %}
            files.forEach((file, i) => uploadFile(file, i, divDragdrop))
        }
    }

    function uploadFile(file, i, dropzone) {
        var divPreview = dropzone.querySelector(".gallery")
        var formData = new FormData()
        formData.append('upload_preset', '{{ myPreset }}')
        formData.append('file', file)

        var xhr = new XMLHttpRequest()
        var formData = new FormData()
        xhr.open('POST', "{{ path(routeController) }}", true)
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')

        {% if progressbar %}
        // Update progress (can be used to show progress indicator)
        xhr.upload.addEventListener("progress", function(e) {
            updateProgress(i, (e.loaded * 100.0 / e.total) || 100, dropzone)
        })
        {% endif %}

        xhr.addEventListener('readystatechange', function(e) {
            if (xhr.readyState == 4 && xhr.status == 200) {
            {% if progressbar %}
                updateProgress(i, 100, dropzone) // <- Add this
            {% endif %}
                xhrFile = JSON.parse(xhr.responseText)
            {% if preview %}
                previewFile(file, divPreview, xhrFile.id)
            {% endif %}
            }
            else if (xhr.readyState == 4 && xhr.status != 200) {
                errors =  JSON.parse(xhr.responseText)
                errors = errors.error
            }
        })

        formData.append('upload_preset', '{{ myPreset }}')
        formData.append('file', file)
        xhr.send(formData)
    }

    function responseModal(e) {
        e.preventDefault()
        e.stopPropagation()

        let bool = false
        if (e.target.id == 'modal-btn-KO') bool = false
        else if (e.target.id == 'modal-btn-OK') bool = true
        else return

        myModal.hide();
        //myModal.dispose();
        modalElem.removeEventListener('click', responseModal)

        if (bool) {
            /** exécute la suppression de l'image */
            let imgID = e.target.parentNode.dataset.fileId
            url = '/bcknd/tools/delt_doc/'+imgID
            fetch(url, { method: "DELETE", }).then(function (response) {
                /** TODO : afficher retour méthode : response en tooltip ou alert */
                show_toast(response.type, response.message)
                console.log(response);
                let imgPreview = document.querySelector(".img-"+imgID)
                imgPreview.remove()
            });
        }
    }

    function d_confirm(msg, file_id, e) {
        e.preventDefault()
        e.stopPropagation()

        modalElem.querySelector('.modal-body-content').innerHTML = msg
        modalElem.querySelector(".modal-footer").setAttribute("data-file-id", file_id)
        
        myModal.show()
        modalElem.addEventListener('click', responseModal)
    }
</script>
{% endmacro %}

{% macro jsInit_dropzone(args={}) %}
    {% set iconSide = args.iconSide ?? "TL" %}
    {% set maxWidthImg = "150" %}
    {% set preview = args.preview ?? false %}
<script>
    var dropzones = document.querySelectorAll(".dragdrop");
    dropzones.forEach(dropzone => {
        // Prevent default drag behaviors
        ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropzone.addEventListener(eventName, (e) => {
                preventDefaults(e);
            });
        })

        // Highlight drop area when item is dragged over it
        ;['dragenter', 'dragover'].forEach(eventName => {
            dropzone.addEventListener(eventName, (e) => {
                highlight(e);
            });
        })

        ;['dragleave', 'drop'].forEach(eventName => {
            dropzone.addEventListener(eventName, (e) => {
                unhighlight(e);
            });
        })

        // Handle dropped files
        dropzone.addEventListener("drop", (e) => {
            handleDrop(e);
        });

        // remplissage de la galerie de prévisualisation si data-initial non vide
        let initial_datas = JSON.parse(dropzone.querySelector("input").dataset.initial)
        let previewDiv = dropzone.querySelector(".gallery")
        initial_datas.forEach((data) => {
            var divPreview = document.createElement('div')
            var img = document.createElement('img')
            img.src = data.preview_url
            img.classList.add("gallery_img")
            img.style.width="{{ maxWidthImg }}px"
            {% if iconSide == "TL" or iconSide == "TR" %}
            img.style.top = '-1.76rem'
            {% endif %}
            divPreview.classList.add('img_preview')
            divPreview.classList.add('img-'+fileID)
            {# ajout icônes avant pour top left & right #}
            {% if iconSide == "TL" or iconSide == "TR" %}
            viewIcon.setAttribute("data-file-id", fileID)
            viewIcon.addEventListener('click', (e) => viewFile(e))
            divPreview.appendChild(viewIcon)
            deltIcon.setAttribute("data-file-id", fileID)
            deltIcon.addEventListener('click', (e) => deltFile(e))
            divPreview.appendChild(deltIcon)
            {% endif %}
            divPreview.appendChild(img)
            {# ajout icônes après pour bottom left & right #}
            {% if iconSide != "TL" and iconSide != "TR" %}
            viewIcon.setAttribute("data-file-id", fileID)
            viewIcon.addEventListener('click', (e) => viewFile(e))
            divPreview.appendChild(viewIcon)
            deltIcon.setAttribute("data-file-id", fileID)
            deltIcon.addEventListener('click', (e) => deltFile(e))
            divPreview.appendChild(deltIcon)
            {% endif %}
            previewDiv.appendChild(divPreview)
        })
    });
</script>
{% endmacro %}