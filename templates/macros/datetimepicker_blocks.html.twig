
{# macro datetimepickerForm : affichage d'un champ de sélection de date et heure #}
{# - name           : identifiant et name déclaré pour le formulaire #}
{# - label          : label ou libellé à afficher dans le bouton, par défaut celui du Form #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer #}
{# - placeholder    : label ou libellé affiché dans la zone de saisie quand vide #}
{# - date_min       : date minimale pouvant être choisie #}
{# - date_max       : date maximale pouvant être choisie #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - day_date       : valeur initiale du choix de la date #}
{# - label_ico      : booléen précisant la présence d'icône (true) ou non (false) devant la date et l'heure #}
{# - title          : infobulle affiché au surval de la zone avec la souris #}
{% macro datetimepickerForm(name, label="", args={}) %}
    {% set class = args.class ?? '' %}
    {% set placeholder = args.placeholder is defined ? args.placeholder : "" %}
    {% set date_min = args.date_min is defined and args.date_min is not empty ? args.date_min : "" %}
    {% set date_max = args.date_max is defined and args.date_max is not empty ? args.date_max : "" %}
    {% set disabled = args.disabeled is defined ? (args.disabled ? true : false) : false %}
    {% set label_ico = args.label_ico is defined ? (args.label_ico ? true : false) : false %}
    {% set title = args.title ?? "" %}

    {% set day_date = args.day_date is defined ? args.day_date : "" %}
    {% if day_date is not empty %}
        {% if day_date is typeOf('array') %}
            {% set dateD = day_date %}
            {% set day_date = "%04d"|format(dateD.year) ~"-"~ "%02d"|format(dateD.month) ~"-"~ "%02d"|format(dateD.day) %}
        {% endif %}
    {% endif %}
    {% if day_time is not empty %}
        {% if day_time is typeOf('array') %}
            {% set dayT = day_time %}
            {% set day_time = "%02d"|format(dayT.hour) ~":"~ "%02d"|format(dayT.minute) %}
        {% endif %}
    {% endif %}

    <div class="datetimepicker-group{% if class is not empty %} {{ class }}{% endif %}">
        {# datepicker : name+'Datepicker' #}
        <label for="{{ name }}DatepickerInput">
            {% if label_ico %}
                <i class="fa fa-calendar"></i>
            {% endif %}
        </label>
        <input id="{{ name }}DatepickerInput" name="{{ name }}DatepickerInput" type="text" class="datepicker-input"
            {% if date_min|length %} data-date-min="{{ date_min }}" {% endif %}
            {% if date_max|length %} data-date-max="{{ date_max }}" {% endif %}
            {% if day_date != "0000-00-00" and day_date is not empty %} data-date="{{ day_date }}" {% endif %}
            {% if title|length %} title="{{ title }}" data-title="{{ title }}" {% endif %}
            {% if placeholder|length %} placeholder="{{ placeholder }}" {% endif %}
            {% if disabled %} disabled="disabled" {% endif %}>
        <input type="hidden" id="{{ name }}Datepicker" name="{{ name }}Datepicker" class="hidden" 
            {% if day_date is not empty %} value="{{ day_date }}" {% endif %}>
        {# timepicker : name+'Timepicker' #}
        <label for="{{ name }}TimepickerInput">
            {% if label_ico %}
                <i class="fa fa-clock"></i>
            {% endif %}
        </label>
        <div class="timepicker-ui">
            <input id="{{ name }}TimepickerInput" name="{{ name }}TimepickerInput" type="text"
                class="timepicker-ui-input"
                {% if day_time is not empty %} value="{{ day_time }}" {% endif %}
            />
        </div>
        <div class="hidden datetimepicker" id="{{ name }}">
            {% import "@templates/macros/form_classic.html.twig" as forms %}
            {{ forms.hidden(name ~ "_date_day", (day_date is not empty ? day_date|slice(8, 2) : ""), {
                'custom_name': name ~ "[date][day]", "class": "date_day",
            }) }}
            {{ forms.hidden(name ~ "_date_month", (day_date is not empty ? day_date|slice(5, 2) : ""), {
                'custom_name': name ~ "[date][month]", "class": "date_month",
            }) }}
            {{ forms.hidden(name ~ "_date_year", (day_date is not empty ? day_date|slice(0, 4) : ""), {
                'custom_name': name ~ "[date][year]", "class": "date_year",
            }) }}
            {{ forms.hidden(name ~ "_time_hour", (day_time is not empty ? day_time|slice(0,2) : ""), {
                'custom_name': name ~ '[time][hour]', "class": "time_hour",
            }) }}
            {{ forms.hidden(name ~ "_time_minute", (day_time is not empty ? day_time|slice(3, 2) : ""), {
                'custom_name': name ~ '[time][minute]', "class": "time_minute",
            }) }}
        </div>
    </div>
{% endmacro %}

{# macro datetimepickerRangeForm zone de sélection de 2 dates #}
{# - form_start     : champ date / heure de début déclaré dans le formulaure #}
{# - form_end       : champ date / heure de fin déclaré dans le formulaure #}
{% macro datetimepickerRangeForm(form_start, form_end, args={}) %}
    {# à developper #}
{% endmacro %}

{# macro datetimepickerField : affichage d'un champ de sélection de date et heure #}
{# - field          : champ date déclaré dans le formulaure Symfony Form #}
{# - label          : label ou libellé à afficher dans le bouton, par défaut celui du Form #}
{# dans le tableau args #}
{# - class          : classe CSS à appliquer #}
{# - placeholder    : label ou libellé affiché dans la zone de saisie quand vide #}
{# - date_min       : date minimale pouuvant être choisie #}
{# - date_max       : date maximale pouuvant être choisie #}
{# - disabled       : booléen d'activation (false) ou désactivation (true) du bouton de soumission #}
{# - day_date       : valeur initiale du choix de la date #}
{# - day_time       : valeur initiale du choix de l'heure #}
{# - label_ico      : booléen précisant la présence d'icône (true) ou non (false) devant la date et l'heure #}
{# - title          : infobulle affiché au surval de la zone avec la souris #}
{% macro datetimepickerField(field, label="", args={}) %}
    {% set field_id = field.vars.id %}
    {% set class = args.class ?? '' %}
    {% set placeholder = args.placeholder is defined ? args.placeholder : "" %}
    {% set date_min = args.date_min is defined and args.date_min is not empty ? args.date_min : "" %}
    {% set date_max = args.date_max is defined and args.date_max is not empty ? args.date_max : "" %}
    {% set disabled = args.disabeled is defined ? (args.disabled ? true : false) : false %}
    {% set label_ico = args.label_ico is defined ? (args.label_ico ? true : false) : false %}
    {% set title = args.title ?? "" %}

    {% set day_date = args.day_date is defined ? args.day_date : "" %}
    {% set day_time = args.day_time is defined ? args.day_time : "" %}
    {% set field_value = field.vars.value %}
    {% set field_date = "" %}
    {% set field_time = "" %}
    {% if field_value is not empty %}
        {% set field_date = "%04d"|format(field_value.date.year ~"-"~ "%02d"|format(field_value.date.month)
                ~"-"~ "%02d"|format(field_value.date.day) ) %}
        {% set field_time = "%02d"|format(field_value.time.hour) ~":"~ "%02d"|format(field_value.time.minute) %}
    {% endif %}
{   {% set day_date = day_date is not empty ? day_date : field_date %}
    {% set day_time = day_time is not empty ? day_time : field_time %}

    {% if day_date is not empty %}
        {% if day_date is typeOf('array') %}
            {% set dayD = day_date %}
            {% set day_date = "%04d"|format(dateD.year) ~"-"~ "%02d"|format(dateD.month) ~"-"~ "%02d"|format(dateD.day) %}
        {% endif %}
    {% endif %}
    {% if day_time is not empty %}
        {% if day_time is typeOf('array') %}
            {% set dayT = day_time %}
            {% set day_time = "%02d"|format(dayT.hour) ~":"~ "%02d"|format(dayT.minute) %}
        {% endif %}
    {% endif %}    

    <div class="datetimepicker-group{% if class is not empty %} {{ class }}{% endif %}">
        {# datepicker : field.vars.id+'Datepicker' #}
        <label for="{{ field_id }}DatepickerInput">
            {% if label_ico %}
                <i class="fa fa-calendar"></i>
            {% endif %}
        </label>
        <input id="{{ field_id }}DatepickerInput" name="{{ field_id }}DatepickerInput"
            type="text" class="datepicker-input"
            {% if date_min|length %} data-date-min="{{ date_min }}" {% endif %}
            {% if day_date != "0000-00-00" and day_date is not empty %} data-date="{{ day_date }}" {% endif %}
            {% if date_max|length %} data-date-max="{{ date_max }}" {% endif %}
            {% if title|length %} title="{{ title }}" data-title="{{ title }}" {% endif %}
                {% if placeholder|length %} placeholder="{{ placeholder }}" {% endif %}
            {% if disabled %} disabled="disabled" {% endif %}>
        <input type="hidden" id="{{ field_id }}Datepicker" class="hidden"
            {% if day_date is not empty %} value="{{ day_date }}" {% endif %}>
        {# timepicker : field.vars.id+'Timepicker' #}
        <label for="{{ field_id }}TimepickerInput">  
            {% if label_ico %}
                <i class="fa fa-clock"></i>
            {% endif %}
        </label>
        <div class="timepicker-ui">
            <input id="{{ field_id }}TimepickerInput" name="{{ field_id }}TimepickerInput"
                type="text" class="timepicker-ui-input"
                {% if day_time is not empty %} value="{{ day_time }}" {% endif %}
            />
        </div>
        <div class="hidden datetimepicker" id="{{ field_id }}">
            {% import "@templates/macros/form_classic.html.twig" as forms %}
            {% set field_name = field.vars.name %}
            {{ forms.hidden(field_id ~ "_date_day", (day_date is not empty ? day_date|slice(8, 2) : ""), {
                'custom_name': field_name ~ "[date][day]", "class": "date_day",
            }) }}
            {{ forms.hidden(field_id ~ "_date_month", (day_date is not empty ? day_date|slice(5, 2) : ""), {
                'custom_name': field_name ~ "[date][month]", "class": "date_month",
            }) }}
            {{ forms.hidden(field_id ~ "_date_year", (day_date is not empty ? day_date|slice(0, 4) : ""), {
                'custom_name': field_name ~ "[date][year]", "class": "date_day",
            }) }}
            {{ forms.hidden(field_id ~ "_time_hour", (day_time is not empty ? day_time|slice(0,2) : ""), {
                'custom_name': field_name ~ '[time][hour]', "class": "time_hour",
            }) }}
            {{ forms.hidden(field_id ~ "_time_minute", (day_time is not empty ? day_time|slice(3, 2) : ""), {
                'custom_name': field_name ~ '[time][minute]', "class": "time_minute",
            }) }}
        </div>
    </div>
{% endmacro %}

{# macro datetimepickerRangeField zone de sélection de 2 dates #}
{# - field_start    : champ date / heure de début déclaré dans le formulaure Symfony Form #}
{# - field_end      : champ date / heure de fin déclaré dans le formulaure Symfony Form #}
{% macro datetimepickerRangeField(field_start, field_end, args={}) %}
    {# à developper #}
{% endmacro %}

{# macro datetimepickerJSinit : script JavaScript de déclaration et création des objets Datepicker & timepicker-ui #}
{# - datepicker     : tableau des paramètres à appliquer aux objets DAtepicker #}
{# - timepicker     : tableau des paramètres à appliquer aux objets timepicker-ui#}
{% macro datetimepickerJSinit(args={}) %}
    {% set datepicker = args.datepicker ?? {} %}
    {% set timepicjer = args.timePicker ?? {} %}

    {% import "@templates/macros/datepicker_blocls.html.twig" as datepickerBlk %}
    {% import "@templates/macros/timeprcker_blocks.html.twig" as timepickerBlk %}
    {{ datepickerBlk.datepickerJSinit(datepicker) }}
    {{ timepickerBlk.timepickerJSinit(timepicker) }}
    
    <script>
        function build_datetimeDatepicker(datepicker) {
            datepicker.addEventListener('changeDate', function (e) {
                let parent = this.parentElement;
                let divDatetimepicker = parent.querySelector("div.hidden.datetimepicker");
                let date = e.detail.date;
                let inputdate = date_to_input_str(date);
                divDatetimepicker.querySelector(".date_year").value = inputdate.substr(0,4);
                divDatetimepicker.querySelector(".date_month").value = inputdate.substr(5,2);
                divDatetimepicker.querySelector(".date_day").value = inputdate.substr(8,2);
            });
        }

        function build_datetimeTimePicker(timepicker) {
            let parent = this.parentElement;
            let inputtime = timeIpicker.querySelector("input").value;
            let divDatetimepicker = parent.querySelector("div.hidden.datetimepicker");
            divDatetimepicker.querySelector(".time_hour").value = inputtime.substr(0, 2);
            divDatetimepicker.querySelector(".time_minute").value = inputtime.substr(3, 2);
        }

        document.addEventListener("DOMContentLoaded", function() {
            let datepickerFields = document.querySelectorAll('input.datepicker-input');
            let timepickers = document.querySelectorAll(".timepicker-ui");

            datepickerFields.forEach(datepickerField => {
                if (datepicker.parentElement.classList.contains("datetimepicker-group")) {
                    build_datetimeDatepicker(datepickerField);
                }
            });
            timepickerFields.forEach(timepicker => {
                if (timepicker.parentElement.classList.contains("datetimepicker-group")) {
                    build_datetimeTimepicker(datepickerField);
                }
            });
        });
    </script>
{% endmacro %}