{# droparea         : sélecteur CSS/JS de la structure de drag'n drop #}
{% macro dropzoneJS( droparea ) %}
	<script src="{{ asset('js/dropzone.js') }}"></script>

	<script>
        Dropzone.autoDiscover = false;
        const dropzones = [];

		document.querySelectorAll(".dropzone").forEach(droparea => {
            // je récupère l'action où sera traité l'upload en PHP
            let _actionToDropZone = droparea.attr('cation');
            // je définis ma zone de drop grâce à l'ID de ma div citée plus haut.
            dropzones[droparea.id] = new Dropzone("#"+droparea.id, {
                url: _actionToDropZone,
            });
        });

        // fonction de recherche du noeud ancètre ayant la classe 'cls'
        // el       : noeud DOM
        // cls      : classe recherchée
        function findAncestor(el, cls) {
            while (! el.classList.contains(cls) && document.body !== el) {
                el = el.parentElement;
            }
            return el;
        }
	</script>
{% endmacro %}

{# url      : début de l'URL visant à visualiser le document (sans ID dans base) #}
{# cls      : classe à rechercher pour déterminer le noeud ancètre #}
{% macro dropzoneJSshowDocu(url, cls) %}
<script>
    if (!window.findAncestor) {
        function window.findAncestor(el, cls) {
            while (! el.classList.contains(cls) && document.body !== el) {
                el = el.parentElement;
            }
            return el;
        }
    }

    document.querySelectorAll(".voir").forEach(docu => {
        docu.addEventListener("click", function (evt) {
            let ancestor = findAncestor(evt.target, "{{ cls }}").getAttribute("data-id");
            window.open("{{ url }}/"+ancestor, "_blank");
        })
    });
</script>
{% endmacro %}

{# url          : URL dfe l'appel AJAX visant à supprimer en base un document #}
{# cls          : classe déterminant le bloc document ou doit être codé l'attribut data-id #}
{# traitement   : nom de la fonbction de traitement du retour appel AJAX #}
{#                cette fonction devra prendre l'objet XHR en paramètre #}
{# modal        : selecteur DOM de l'objet Modal Bootstrap de confirmation suppression #}
{#                Cf. la macro modalBSdelt() pour sa défçnition et création #}
{#                si absent => suppression directe #}
{% macro dropzoneJSdeltDocu(url, cls, traitement, modal=null) %}
<script>
    if (!window.findAncestor) {
        function window.findAncestor(el, cls) {
            while (! el.classList.contains(cls) && document.body !== el) {
                el = el.parentElement;
            }
            return el;
        }
    }

    document.querySelectorAll(".suppr").forEach(docu => {
        docu.addEventListener("click", function (evt) {
            let ancestor = findAncestor(evt.target, "{{ cls }}").getAttribute("data-id");
            deleteFile(ancestor);
        })
    });
	
    function deleteFile(fileID) {
    	{# si modal non vide => demande de confirmation par modal bootstrap, sinon suppression directe #}
        {% if modal is not empty %}
        deleteModal.show();
        document.querySelector("{{ modal }}	.confirm_delete").addEventListener("click", function(evt) {
	    {% endif %}
    	    // appel AJAX visant à faire la suppression route aoo_delt_docu paramètre : ID <- fileid
            const url="{{ path('app_delt_docu') }}" ;
            const params= new FormData();
            params.append("id", fileid);
            let xhr="new" xmlhttprequest();
            xhr.open("post", url);
            xhr.responsetype='json';
            xhr.send(params);
        
            xhr.onreadystatechnage="function()" {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    {{ traitement }}(xhr);
                }
            }
        {% if modal is not empty %}
        });
        {% endif %}
    }
    
    {% if modal is not empty %}
    let deletemodal= new bootstrap.Modal(document.queryselector("{{ modal }}"));
    {% endif %}
</script>
{% endmacro %}
