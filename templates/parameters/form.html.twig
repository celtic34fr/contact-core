{% extends '@contact-core/layout_backend.html.twig' %}
{% import '@contact-core/macros/form_type.html.twig' as fields %}
{% import '@contact-core/macros/generals.html.twig' as generals %}

{% block shoulder %}
	{{ "Param√©trages" }}
{% endblock shoulder %}

{% block title %}
	<i class="fas mr-2 link--icon fa-building"></i>
	{{ title }}
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
{% endblock %}

{% block main %}
	{% set urlForm %}
	{% if mode == "new" %}
		{{ path('parameters-params-list-'~mode) }}
	{% elseif mode == "edt" %}
		{{ path('parameters-params-list-'~mode, {'id': id}) }}
	{% else %}
		#
	{% endif %}
	{% endset %}
	{{ form_start(form, {'action': urlForm, 'method': 'POST'}) }}
	{{ form_row(form._token) }}

	{{ fields.field(form.name, "", {
			'il_class': {'label': 'col-4', 'input': 'col-8', 'value': form.name.vars.value},
			'class': 'col-12 my-3',
		})
	}}
	{{ fields.field(form.description, "", {
			'il_class': {'label': 'col-4', 'input': 'col-8', 'value': form.description.vars.value},
			'class': 'col-12 my-3',
		})
	}}

	<div class="col-12 row">
		{{ form_label(form.values) }}
		{{ form_errors(form.values) }}
		<ul class="values col-12 row" data-index="{{ form.values.children|length > 0 ? (form.values.children|last).vars.name + 1 : 0 }}" data-prototype='<span class="col-1">__name__ : </span>{{ form_widget(form.values.vars.prototype, {'attr': {'class': 'col-9', 'data-ord': '__name__'}})|e('html_attr') }}'>
			{% for idx, valueField in form.values %}
				<li class="col-12 row my-2">
					<span class="col-1">
						{{idx}}&nbsp;:&nbsp;
					</span>
					{{ form_widget(valueField, {'attr': {'class': 'col-9', 'data-ord': idx} }) }}
				</li>
			{% endfor %}
		</ul>
		<button type="button" class="add_item_link btn btn-primary" data-collection-holder-class="values">
			Ajouter une valeur
		</button>
	</div>

	<div class="col-12 row m-0 p-o">
		{{ fields.submitbtn(form.record, "" , {'class': 'col-4 offset-1 btn btn-success my-3'}) }}
		{{ generals.btnRedirect('cancel', "Tout annuler", {
			'class': 'col-4 offset-2 btn btn-bs-warning my-3', 'bclass': 'btn btn-bs-warning', 'route': 'parameters-params-list'
		}) }}
	</div>

	{{ form_end(form, {render_rest: false}) }}
	<div class="col-12 mt-2 text-right text-gray-600 px-0 mx-3">
		* champs obligatoires
	</div>
{% endblock %}

{% block javascripts %}
	{{ parent() }}

	<script>
		function addTagFormDeleteLink(item, index) {
			const removeFormButton = document.createElement('button');
			removeFormButton.classList.add("btn");
			removeFormButton.classList.add("btn-warning");
			removeFormButton.classList.add("col-2");
			removeFormButton.setAttribute('title', 'Supprimer la valeur');
			const removeFormIcon = document.createElement("i");
			removeFormIcon.classList.add("fa");
			removeFormIcon.classList.add("fa-trash");
			removeFormButton.append(removeFormIcon);
			if (index < 1) {
				removeFormButton.disabled = true;
			}
			item.append(removeFormButton);

			removeFormButton.addEventListener('click', (e) => {
				e.preventDefault();
				let item = e.currentTarget.parentElement;
				let list = item.parentElement;
				let index = parseInt(item.querySelector("input").dataset.ord);
				item.remove();

				let spans = list.querySelectorAll("span");
				spans.forEach(span => {
					let idx = parseInt(span.innerHTML);

					if (idx > index) {
						let idxStr = idx.toString();
						let nidxStr = (idx - 1).toString();
						let input = span.parentElement.querySelector("input");
						let iclone = input.cloneNode(1);

						span.innerHTML = nidxStr + " : ";
						iclone.id = input.id.replace(idxStr, nidxStr);
						iclone.name = input.name.replace(idxStr, nidxStr);
						iclone.value = input.value;
						iclone.dataset.ord = nidxStr;
						input.remove();
						span.after(iclone);
					}
				});
			});
		}

		function addEmptyLi(bouton) {
			const collectionHolder = document.querySelector('.' + bouton.dataset.collectionHolderClass);
			const index = parseInt(collectionHolder.dataset.index);
			const item = document.createElement('li');
			item.classList.add("col-12");
			item.classList.add("row");
			item.classList.add("my-2");
			item.innerHTML = collectionHolder.dataset.prototype.replace(/__name__/g, index);
			collectionHolder.appendChild(item);

			collectionHolder.dataset.index ++;
			addTagFormDeleteLink(item, index);
		}

		document.addEventListener("DOMContentLoaded", function () {
			document.querySelectorAll('.add_item_link').forEach(btn => {
				btn.addEventListener("click", function (e) {
					addEmptyLi(e.currentTarget);
				});
			});

			document.querySelectorAll('ul.values li').forEach((val) => {
				let input = val.querySelector("input");
				let ord = parseInt(input.dataset.ord);
				addTagFormDeleteLink(val, ord)
			});

			const bouton = document.querySelector(".add_item_link")
			const valuesNBR = document.querySelectorAll("ul.values li");
			if (valuesNBR.length < 1) {
				addEmptyLi(bouton);
			}
		});
	</script>
{% endblock %}

